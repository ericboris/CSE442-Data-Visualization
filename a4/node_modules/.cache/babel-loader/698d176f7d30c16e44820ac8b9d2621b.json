{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(_ref) {\n  _s();\n\n  let {\n    block,\n    setBlock1\n  } = _ref;\n  const [blockNumber, setBlockNumber] = useState(block.blockNumber);\n  const [nonce, setNonce] = useState(block.nonce);\n  const [data, setData] = useState(block.data);\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true); // Set isSigned.\n\n  useEffect(() => {\n    setIsSigned(block.hash.substr(0, difficulty) === pattern ? true : false);\n  }, [block.hash]); // Set color.\n\n  useEffect(() => {\n    setColor(isSigned ? GREEN : RED);\n  }, [isSigned]); // Notify the caller of the changes. \n\n  useEffect(() => {\n    //callback({...block, blockNumber, nonce, data});\n    setBlock1({ ...block,\n      blockNumber,\n      nonce,\n      data\n    });\n  }, [blockNumber, nonce, data]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: blockNumber,\n          callback: blockNumber => setBlockNumber(String(blockNumber))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: nonce,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => setData(String(data))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Previous Hash:',\n          value: block.prevHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: block.hash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: blockNumber,\n          data: data,\n          prevHash: block.prevHash,\n          callback: nonce => setNonce(nonce)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"ffCmoJdJSwjRH8ziu68gt1RNnaM=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","NumberField","ReadOnlyTextField","TextAreaField","MineButton","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","block","setBlock1","blockNumber","setBlockNumber","nonce","setNonce","data","setData","color","setColor","isSigned","setIsSigned","hash","substr","String","prevHash"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock({block, setBlock1}) {\n    const [blockNumber, setBlockNumber] = useState(block.blockNumber);\n    const [nonce, setNonce] = useState(block.nonce);\n    const [data, setData] = useState(block.data);\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    // Set isSigned.\n    useEffect(() => {\n        setIsSigned(block.hash.substr(0, difficulty) === pattern ? true : false);\n    }, [block.hash]);\n\n    // Set color.\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    }, [isSigned]);\n\n    // Notify the caller of the changes. \n    useEffect(() => {\n        //callback({...block, blockNumber, nonce, data});\n        setBlock1({...block, blockNumber, nonce, data});\n    }, [blockNumber, nonce, data]);\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={blockNumber}\n                        callback={(blockNumber) => setBlockNumber(String(blockNumber))}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={nonce}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => setData(String(data))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Previous Hash:'}\n                        value={block.prevHash}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={block.hash}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={blockNumber}\n                        data={data}\n                        prevHash={block.prevHash}\n                        callback={(nonce) => setNonce(nonce)}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}