{"ast":null,"code":"import _classCallCheck from\"/Users/ericboris/Developer/CSE442/a4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ericboris/Developer/CSE442/a4/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ericboris/Developer/CSE442/a4/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ericboris/Developer/CSE442/a4/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Container}from'react-bootstrap';//import Form from 'react-bootstrap';\n//import { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\nimport SingleBlock from'../SingleBlock';//import get from '../../descriptionLoader';\n//commented a lot out to get it to show the box\n// function mineBlock(data) {\n//     var difficulty = 4;        // number of zeros required at front of hash\n//     var maximumNonce = 50000; // limit the nonce to this so we don't mine too long\n//     var pattern = '';\n//     for (var x=0; x<difficulty; x++) {\n//         pattern += '0';\n//     }\n//     let hashAndNonce = {};\n//     for (var x = 0; x <= maximumNonce; x++) {\n//         var nonceString = x.toString();\n//         var newData = data + nonceString;\n//         hashAndNonce[0] = (sha256(newData));\n//         if (hashAndNonce[0].substr(0, difficulty) === pattern) {\n//             console.log(\"hashed successfully:\" + hashAndNonce[0])\n//             hashAndNonce[1] = x;\n//             break;\n//         }\n//     }\n//     console.log(hashAndNonce);\n//     //TODO: Update the values of hash and nonce\n//     // this.setState({hash : hashAndNonce[0],\n//     //                nonce: hashAndNonce[1]})  ;\n//     //  return hashAndNonce;\n// }\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Blockchain=/*#__PURE__*/function(_Component){_inherits(Blockchain,_Component);var _super=_createSuper(Blockchain);function Blockchain(props){var _this;_classCallCheck(this,Blockchain);_this=_super.call(this,props);var title=\"Blockchain [WORK IN PROGRESS] \",body=\"Blockchain's Description\";_this.state={title:title,body:body};return _this;}_createClass(Blockchain,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"h2\",{children:this.state.title}),/*#__PURE__*/_jsx(\"div\",{children:this.state.body.split('\\n\\n').map(function(paragraph){return/*#__PURE__*/_jsx(\"p\",{children:paragraph.split('\\n').reduce(function(total,line){return[total,/*#__PURE__*/_jsx(\"br\",{}),line];})});})}),/*#__PURE__*/_jsxs(\"div\",{class:\"row justify-content-around\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-sm-3\",style:{\"background-color\":\"#50C878\"},children:/*#__PURE__*/_jsx(SingleBlock,{})}),/*#__PURE__*/_jsx(\"div\",{class:\"col-sm-3\",style:{\"background-color\":\"#50C878\"},children:/*#__PURE__*/_jsx(SingleBlock,{})}),/*#__PURE__*/_jsx(\"div\",{class:\"col-sm-3\",style:{\"background-color\":\"#50C878\"},children:/*#__PURE__*/_jsx(SingleBlock,{})})]})]});}}]);return Blockchain;}(Component);export default Blockchain;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/Blockchain.js"],"names":["React","Component","Container","SingleBlock","Blockchain","props","title","body","state","split","map","paragraph","reduce","total","line"],"mappings":"4cAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,KAA0B,iBAA1B,CACA;AACA;AACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;2FAGMC,CAAAA,U,wGACF,oBAAYC,KAAZ,CAAmB,4CACf,uBAAMA,KAAN,EACA,GAAOC,CAAAA,KAAP,CAAuB,gCAAvB,CAAcC,IAAd,CAAyD,0BAAzD,CACA,MAAKC,KAAL,CAAa,CACTF,KAAK,CAALA,KADS,CAETC,IAAI,CAAJA,IAFS,CAAb,CAHe,aAOlB,C,6CAED,iBAAS,CACL,mBACI,MAAC,SAAD,yBACI,oBACK,KAAKC,KAAL,CAAWF,KADhB,EADJ,cAII,qBACK,KAAKE,KAAL,CAAWD,IAAX,CAAgBE,KAAhB,CAAsB,MAAtB,EAA8BC,GAA9B,CAAkC,SAAAC,SAAS,qBACxC,mBACKA,SAAS,CAACF,KAAV,CAAgB,IAAhB,EAAsBG,MAAtB,CAA6B,SAACC,KAAD,CAAQC,IAAR,QAAiB,CAACD,KAAD,cAAQ,aAAR,CAAgBC,IAAhB,CAAjB,EAA7B,CADL,EADwC,EAA3C,CADL,EAJJ,cAWI,aAAK,KAAK,CAAG,4BAAb,wBACI,YAAK,KAAK,CAAG,UAAb,CAAwB,KAAK,CAAI,CAAC,mBAAmB,SAApB,CAAjC,uBACI,KAAC,WAAD,IADJ,EADJ,cAII,YAAK,KAAK,CAAG,UAAb,CAAwB,KAAK,CAAI,CAAC,mBAAmB,SAApB,CAAjC,uBACI,KAAC,WAAD,IADJ,EAJJ,cAOI,YAAK,KAAK,CAAG,UAAb,CAAwB,KAAK,CAAI,CAAC,mBAAmB,SAApB,CAAjC,uBACI,KAAC,WAAD,IADJ,EAPJ,GAXJ,GADJ,CAyBH,C,wBApCoBb,S,EAuCzB,cAAeG,CAAAA,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\n//import Form from 'react-bootstrap';\n//import { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\nimport SingleBlock from '../SingleBlock'\n//import get from '../../descriptionLoader';\n\n\n//commented a lot out to get it to show the box\n\n// function mineBlock(data) {\n//     var difficulty = 4;        // number of zeros required at front of hash\n//     var maximumNonce = 50000; // limit the nonce to this so we don't mine too long\n\n\n//     var pattern = '';\n//     for (var x=0; x<difficulty; x++) {\n//         pattern += '0';\n//     }\n\n//     let hashAndNonce = {};\n//     for (var x = 0; x <= maximumNonce; x++) {\n//         var nonceString = x.toString();\n//         var newData = data + nonceString;\n//         hashAndNonce[0] = (sha256(newData));\n//         if (hashAndNonce[0].substr(0, difficulty) === pattern) {\n//             console.log(\"hashed successfully:\" + hashAndNonce[0])\n//             hashAndNonce[1] = x;\n//             break;\n//         }\n//     }\n//     console.log(hashAndNonce);\n//     //TODO: Update the values of hash and nonce\n\n//     // this.setState({hash : hashAndNonce[0],\n//     //                nonce: hashAndNonce[1]})  ;\n\n//     //  return hashAndNonce;\n// }\n\n\nclass Blockchain extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Blockchain [WORK IN PROGRESS] \", \"Blockchain's Description\"];\n        this.state = {\n            title,\n            body\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <div class = \"row justify-content-around\" >\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default Blockchain;\n"]},"metadata":{},"sourceType":"module"}