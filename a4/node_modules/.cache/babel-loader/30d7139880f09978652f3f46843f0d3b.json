{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash,\n    isSigned,\n    callback,\n    block,\n    setBlock\n  } = _ref;\n\n  function hash(nonce) {\n    sha256(blockNumber + nonce + data + prevHash);\n  }\n\n  const mine = () => {\n    for (let nonce = 0; nonce < maxNonce; nonce++) {\n      if (hash(nonce).substr(0, difficulty) === pattern) {\n        return;\n      }\n\n      setBlock({ ...block,\n        nonce\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","MineButton","blockNumber","data","prevHash","isSigned","callback","block","setBlock","hash","nonce","mine","substr"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;;AAEA,SAASC,UAAT,OAAwF;AAAA,MAApE;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA,KAAlD;AAAyDC,IAAAA;AAAzD,GAAoE;;AACpF,WAASC,IAAT,CAAcC,KAAd,EAAqB;AACjBf,IAAAA,MAAM,CAACO,WAAW,GAAGQ,KAAd,GAAsBP,IAAtB,GAA6BC,QAA9B,CAAN;AACH;;AAED,QAAMO,IAAI,GAAG,MAAM;AACf,SAAK,IAAID,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGZ,QAA5B,EAAsCY,KAAK,EAA3C,EAA+C;AAC3C,UAAID,IAAI,CAACC,KAAD,CAAJ,CAAYE,MAAZ,CAAmB,CAAnB,EAAsBf,UAAtB,MAAsCG,OAA1C,EAAmD;AAC/C;AACH;;AACDQ,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,QAAAA;AAAX,OAAD,CAAR;AACH;AACJ,GAPD;;AASA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMC,IAAI,EADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KArBQV,U;AAqBR;AAED,SAASA,UAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton({blockNumber, data, prevHash, isSigned, callback, block, setBlock}) {\n    function hash(nonce) {\n        sha256(blockNumber + nonce + data + prevHash);\n    }\n    \n    const mine = () => {\n        for (let nonce = 0; nonce < maxNonce; nonce++) {\n            if (hash(nonce).substr(0, difficulty) === pattern) {\n                return;\n            }\n            setBlock({...block, nonce});\n        }\n    }   \n\n    return (\n        <Button \n            onClick={() => mine()}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}