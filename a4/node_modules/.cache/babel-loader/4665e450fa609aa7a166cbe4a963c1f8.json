{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let sequence = null;\n  let nonce = 0;\n  let hash = sha256(String(blockNumber + nonce + data + prevHash));\n\n  while (hash.substr(0, difficulty) !== pattern) {\n    let newBlock = block;\n    newBlock.hash = hash;\n    setBlock(newBlock);\n    hash = sha256(String(blockNumber + nonce + data + prevHash));\n    nonce++;\n  }\n}\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    block,\n    setBlock\n  } = _ref;\n\n  const handleClick = () => {};\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(blockNumber, data, prevHash),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","sequence","nonce","hash","String","substr","newBlock","block","setBlock","MineButton","handleClick"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;;AAEA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAA8C;AAAA,MAAbC,QAAa,uEAAJ,EAAI;AAC1C,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAGX,MAAM,CAACY,MAAM,CAACN,WAAW,GAAGI,KAAd,GAAsBH,IAAtB,GAA6BC,QAA9B,CAAP,CAAjB;;AACA,SAAOG,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeX,UAAf,MAA+BE,OAAtC,EAA+C;AAC3C,QAAIU,QAAQ,GAAGC,KAAf;AACAD,IAAAA,QAAQ,CAACH,IAAT,GAAgBA,IAAhB;AACAK,IAAAA,QAAQ,CAACF,QAAD,CAAR;AACAH,IAAAA,IAAI,GAAGX,MAAM,CAACY,MAAM,CAACN,WAAW,GAAGI,KAAd,GAAsBH,IAAtB,GAA6BC,QAA9B,CAAP,CAAb;AACAE,IAAAA,KAAK;AACR;AACJ;;AAED,SAASO,UAAT,OAAuE;AAAA,MAAnD;AAACX,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCO,IAAAA,KAAjC;AAAwCC,IAAAA;AAAxC,GAAmD;;AACnE,QAAME,WAAW,GAAG,MAAM,CACzB,CADD;;AAGA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMb,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,CADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KAXQS,U;AAWR;AAED,SAASA,UAAT,EAAqBZ,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data, prevHash=\"\") {\n    let sequence = null;\n    let nonce = 0;\n    let hash = sha256(String(blockNumber + nonce + data + prevHash));\n    while (hash.substr(0, difficulty) !== pattern) {\n        let newBlock = block;\n        newBlock.hash = hash;\n        setBlock(newBlock);\n        hash = sha256(String(blockNumber + nonce + data + prevHash));\n        nonce++;\n    }\n}\n\nfunction MineButton({blockNumber, data, prevHash=\"\", block, setBlock}) {\n    const handleClick = () => {\n    }\n\n    return (\n        <Button \n            onClick={() => mine(blockNumber, data, prevHash)}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}