{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Block/Block.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { render } from \"react-dom\"; //import get from '../../descriptionLoader';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet difficulty = 4; // number of zeros required at front of hash\n\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n  constructor(props) {\n    super(props);\n    const [title, body] = [\"Block\", \"Blocky stuff\"];\n    this.state = {\n      pattern: '0'.repeat(difficulty),\n      blockNumber: 1,\n      nonce: 72608,\n      data: \"\",\n      hash: sha256(\"1\" + \"72608\" + \"\"),\n      title,\n      body\n    };\n    this.getSequence = this.getSequence.bind(this);\n    this.mine = this.mine.bind(this);\n  }\n\n  getSequence() {\n    return this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString();\n  }\n\n  mine(blockNum, data) {\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = blockNum.toString() + nonce.toString() + data.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === this.state.pattern) {\n        console.log(\"blockNum: \", blockNum);\n        console.log('data: ', data);\n        console.log('sequence: ', sequence);\n        console.log('hash: ', hash);\n        console.log('nonce: ', nonce);\n        console.log('\\n');\n        this.setState({\n          hash,\n          nonce\n        });\n        return;\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.body.split('\\n\\n').map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: paragraph.split('\\n').reduce((total, line) => [total, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 84\n          }, this), line])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onChange: event => {\n            event.preventDefault();\n            this.setState({\n              blockNumber: this.blockNumber.value,\n              nonce: this.nonce.value,\n              data: this.data.value,\n              hash: sha256(this.getSequence())\n            });\n            console.log(this.state);\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Block Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"number\",\n              ref: input => this.blockNumber = input,\n              value: this.state.blockNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Nonce:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"number\",\n              ref: input => this.nonce = input,\n              value: this.state.nonce\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Data:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"text\",\n              placeholder: \"\",\n              ref: input => this.data = input,\n              value: this.state.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Hash:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: this.state.hash,\n              plaintext: true,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: event => {\n            event.preventDefault();\n            this.mine(this.state.blockNumber, this.state.data);\n          },\n          children: \"Press\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Block;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Block/Block.js"],"names":["React","Component","Container","Form","Button","sha256","render","difficulty","maximumNonce","Block","constructor","props","title","body","state","pattern","repeat","blockNumber","nonce","data","hash","getSequence","bind","mine","value","toString","blockNum","sequence","substr","console","log","setState","split","map","paragraph","reduce","total","line","event","preventDefault","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport {render} from \"react-dom\";\n//import get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Block\", \"Blocky stuff\"];\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            title,\n            body,\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n    \n    mine(blockNum, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNum.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                console.log(\"blockNum: \", blockNum);\n                console.log('data: ', data);\n                console.log('sequence: ', sequence);\n                console.log('hash: ', hash);\n                console.log('nonce: ', nonce);\n                console.log('\\n');\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                        });\n                        console.log(this.state);\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                                }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\" \n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:  \n                            </Form.Label>\n                            <Form.Control \n                                type=\"text\" \n                                value= {this.state.hash}\n                                plaintext readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n\n"]},"metadata":{},"sourceType":"module"}