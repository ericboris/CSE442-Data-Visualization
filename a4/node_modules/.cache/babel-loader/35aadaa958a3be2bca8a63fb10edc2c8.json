{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Mine.js\";\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = 4; // number of zeros required at front of hash\n\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction Mine(_ref) {\n  let {\n    blockNumber,\n    data\n  } = _ref;\n\n  /* Find a nonce s.t. the hash of the string concatenation of\n   * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n   * that starts with n=difficulty many zeros.\n   * Updates the state with the found nonce and hash.\n   */\n  function mine() {\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = {\n        blockNumber\n      }.toString() + nonce.toString() + {\n        data\n      }.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === this.state.pattern) {\n        c; //return {nonce, hash};\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: event => {\n      console.log(\"CLICKED\");\n      event.preventDefault();\n    },\n    children: \"Mine!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Mine;\n;\nexport default Mine;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mine\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Mine.js"],"names":["Button","sha256","difficulty","maximumNonce","Mine","blockNumber","data","mine","sequence","hash","nonce","toString","substr","state","pattern","c","event","console","log","preventDefault"],"mappings":";AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAnB,C,CAA6B;;AAC7B,MAAMC,YAAY,GAAG,MAArB,C,CAA6B;;AAE7B,SAASC,IAAT,OAAmC;AAAA,MAArB;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,GAAqB;;AAC/B;AACJ;AACA;AACA;AACA;AACI,WAASC,IAAT,GAAgB;AACZ,QAAIC,QAAQ,GAAG,IAAf;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIP,YAA7B,EAA2CO,KAAK,EAAhD,EAAoD;AAChDF,MAAAA,QAAQ,GAAG;AAACH,QAAAA;AAAD,QAAcM,QAAd,KAA2BD,KAAK,CAACC,QAAN,EAA3B,GAA8C;AAACL,QAAAA;AAAD,QAAOK,QAAP,EAAzD;AACAF,MAAAA,IAAI,GAAGR,MAAM,CAACO,QAAD,CAAb;;AACA,UAAIC,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeV,UAAf,MAA+B,KAAKW,KAAL,CAAWC,OAA9C,EAAuD;AACnDC,QAAAA,CAAC,CADkD,CAEnD;AACH;AACJ;AACL;;AAEA,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAGC,KAAD,IAAW;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,MAAAA,KAAK,CAACG,cAAN;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KA3BQf,I;AA2BR;AAED,eAAeA,IAAf","sourcesContent":["import { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n\nconst difficulty = 4;        // number of zeros required at front of hash\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction Mine({blockNumber, data}) {\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    function mine() {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = {blockNumber}.toString() + nonce.toString() + {data}.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                c\n                //return {nonce, hash};\n            }\n        }\n   }\n\n    return (\n        <Button onClick={(event) => {\n            console.log(\"CLICKED\");\n            event.preventDefault();\n        }}>\n            Mine!\n        </Button>\n    );\n};\n\nexport default Mine;\n"]},"metadata":{},"sourceType":"module"}