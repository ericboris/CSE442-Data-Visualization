{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings';\nimport { sha256 } from 'js-sha256'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(_ref) {\n  _s();\n\n  let {\n    block,\n    setBlock\n  } = _ref;\n  const {\n    blockNumber,\n    nonce,\n    data,\n    prevHash,\n    hash\n  } = block;\n  const [isSigned, setIsSigned] = useState(true); // Set the hash.\n\n  useEffect(() => {\n    setBlock({ ...block,\n      hash: String(sha256(blockNumber + nonce + data + prevHash))\n    });\n  }, [blockNumber, nonce, data, prevHash]); // Set isSigned.\n\n  useEffect(() => {\n    setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      'width': 350,\n      'height': 500,\n      'background-color': hash.substr(0, difficulty) === pattern ? GREEN : RED\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: 'Block Number:',\n        value: blockNumber,\n        callback: blockNumber => setBlock({ ...block,\n          blockNumber\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: 'Nonce:',\n        value: nonce,\n        callback: nonce => setBlock({ ...block,\n          nonce\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n        label: 'Data:',\n        callback: data => setBlock({ ...block,\n          data\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n        label: 'Previous Hash:',\n        value: prevHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n        label: 'Hash:',\n        value: hash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n        blockNumber: blockNumber,\n        data: data,\n        prevHash: prevHash,\n        block: block,\n        setBlock: setBlock,\n        isSigned: true,\n        callback: nonce => setBlock({ ...block,\n          nonce\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"desfva08+8kMHquF23uDjCvBA9U=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","NumberField","ReadOnlyTextField","TextAreaField","MineButton","MineSettings","sha256","difficulty","pattern","GREEN","RED","SingleBlock","block","setBlock","blockNumber","nonce","data","prevHash","hash","isSigned","setIsSigned","String","substr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings';\nimport { sha256 } from 'js-sha256';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\n\nfunction SingleBlock({block, setBlock}) {\n    const {blockNumber, nonce, data, prevHash, hash} = block;\n    const [isSigned, setIsSigned] = useState(true);\n    \n    // Set the hash.\n    useEffect(() => {\n        setBlock({...block, hash: String(sha256(blockNumber + nonce + data + prevHash))});\n    }, [blockNumber, nonce, data, prevHash]);\n\n    // Set isSigned.\n    useEffect(() => {\n        setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n    });\n\n    return (\n        <Container\n            style={{\n                'width':350,\n                'height':500,\n                'background-color':hash.substr(0, difficulty) === pattern ? GREEN : RED\n            }}\n        >\n            <Form>\n                <br/>\n                <NumberField\n                    label={'Block Number:'}\n                    value={blockNumber}\n                    callback={(blockNumber) => setBlock({...block, blockNumber})}\n                />\n                <NumberField\n                    label={'Nonce:'}\n                    value={nonce}\n                    callback={(nonce) => setBlock({...block, nonce})}\n                />\n                <TextAreaField\n                    label={'Data:'}\n                    callback={(data) => setBlock({...block, data})}\n                />\n                <ReadOnlyTextField\n                    label={'Previous Hash:'}\n                    value={prevHash}\n                />\n                <ReadOnlyTextField\n                    label={'Hash:'}\n                    value={hash}\n                />\n                <br/>\n                <MineButton\n                    blockNumber={blockNumber}\n                    data={data}\n                    prevHash={prevHash}\n                    block={block}\n                    setBlock={setBlock}\n                    isSigned={true}\n                    callback={(nonce) => setBlock({...block, nonce})}\n                />\n            </Form>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}