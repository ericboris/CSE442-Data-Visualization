{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setHash = hash => this.setState({\n      block: { ...this.state.block,\n        hash\n      }\n    });\n\n    this.setField = (key, value) => this.setState({\n      block: { ...this.state.block,\n        key: value\n      }\n    });\n\n    this.state = {\n      block: props.block,\n      color: \"#50c878\",\n      signed: true\n    };\n  }\n  /* Given a block return its hash.\n   * Assumes the block only contains fields that should be hashed plus \n   * a hash field, which is excluded.\n   */\n\n\n  getHash(block) {\n    // If one exists, remove a 'hash' field from the block.\n    let filteredBlock = Object.fromEntries(Object.entries(block).filter(_ref => {\n      let [key] = _ref;\n      return key !== 'hash';\n    })); // And concatenate the remaining field values into a string.\n\n    let str = Object.values(filteredBlock).map(field => field.toString()).join('');\n    return sha256(str);\n  }\n\n  getPattern(hash) {\n    return hash.substr(0, difficulty);\n  }\n\n  isSigned() {\n    return this.getPattern(this.state.hash) === pattern ? true : false;\n  }\n  /*\n  componentDidMount() {\n      // let nonce = mine(this.state.blockNumber, this.state.data, this.props.prevHash);\n      // this.setState({nonce});\n      let hash = this.getHash();\n      this.setState({hash});\n      let prevHash = '0000000000000000000000000000000000000000000000000000000000000000';\n      this.setState({prevHash});\n  }\n  */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const hash = this.getHash(this.state.block);\n    console.log(\"HASH: \", hash);\n    console.log(\"PREV HASH: \", prevState.block.hash);\n    console.log(\"BLOCK NUM: \", this.state.block.blockNumber);\n    console.log(\"DATA: \", this.state.block.data);\n\n    if (prevState.block.hash !== hash) {\n      this.setHash(hash);\n    }\n    /*\n    //let prevHash = this.props.prevHash;\n    if (prevState.prevHash !== prevHash) {\n        this.setState({prevHash});\n    }\n    */\n\n    /*\n    let signed = this.isSigned();\n    //console.log(\"BlockNum: \", this.state.blockNumber, \" PrevHash: \", this.props.prevHash);\n    if (prevState.signed !== signed) {\n        this.setState({signed});\n        this.setState({color: signed ? '#50c878' : '#ff0000'});\n    }\n    */\n\n    /*\n    if (prevState.block !== block)\n        // Pass the updated hash up to the parent blockchain.\n        this.props.callback(block);\n    }\n    */\n\n\n    console.log('BLOCK NUMBER: ', this.state.block.blockNumber);\n  }\n\n  render() {\n    const color = this.state.color;\n    const block = this.state.block;\n    const {\n      blockNumber,\n      nonce,\n      data,\n      hash\n    } = block;\n    const prevHash = this.props.prevHash;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          'width': 350,\n          'height': 500,\n          'background-color': color\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Block Number:',\n            value: blockNumber,\n            callback: blockNumber => this.setField(blockNumber)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Nonce:',\n            value: nonce,\n            callback: nonce => this.setState({ ...block,\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n            label: 'Data:',\n            callback: data => this.setField(data)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Prev:',\n            value: this.props.prevHash,\n            callback: prevHash => this.setState({\n              prevHash\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Hash:',\n            value: hash,\n            callback: hash => this.setState({\n              hash\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n            blockNumber: blockNumber,\n            data: data,\n            prevHash: this.props.prevHash,\n            callback: nonce => this.setState({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","Component","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","SingleBlock","constructor","props","setHash","hash","setState","block","state","setField","key","value","color","signed","getHash","filteredBlock","Object","fromEntries","entries","filter","str","values","map","field","toString","join","getPattern","substr","isSigned","componentDidUpdate","prevProps","prevState","console","log","blockNumber","data","render","nonce","prevHash"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            block: props.block,\n            color: \"#50c878\",\n            signed: true\n        };\n    }\n\n    /* Given a block return its hash.\n     * Assumes the block only contains fields that should be hashed plus \n     * a hash field, which is excluded.\n     */\n    getHash(block) {\n        // If one exists, remove a 'hash' field from the block.\n        let filteredBlock = Object.fromEntries(Object.entries(block).filter(([key]) => key !== 'hash'));\n        // And concatenate the remaining field values into a string.\n        let str = Object.values(filteredBlock).map(field => field.toString()).join('');\n        return sha256(str);\n    }\n\n    getPattern(hash) {\n        return hash.substr(0, difficulty);\n    }\n\n    isSigned() {\n        return (this.getPattern(this.state.hash) === pattern) ? true : false;\n    }\n\n    /*\n    componentDidMount() {\n        // let nonce = mine(this.state.blockNumber, this.state.data, this.props.prevHash);\n        // this.setState({nonce});\n        let hash = this.getHash();\n        this.setState({hash});\n        let prevHash = '0000000000000000000000000000000000000000000000000000000000000000';\n        this.setState({prevHash});\n    }\n    */\n\n    componentDidUpdate(prevProps, prevState) {\n        const hash = this.getHash(this.state.block);\n        console.log(\"HASH: \", hash);\n        console.log(\"PREV HASH: \", prevState.block.hash);\n        console.log(\"BLOCK NUM: \", this.state.block.blockNumber);\n        console.log(\"DATA: \", this.state.block.data);\n        if (prevState.block.hash !== hash) {\n            this.setHash(hash);\n        }\n        /*\n        //let prevHash = this.props.prevHash;\n        if (prevState.prevHash !== prevHash) {\n            this.setState({prevHash});\n        }\n        */\n        /*\n        let signed = this.isSigned();\n        //console.log(\"BlockNum: \", this.state.blockNumber, \" PrevHash: \", this.props.prevHash);\n        if (prevState.signed !== signed) {\n            this.setState({signed});\n            this.setState({color: signed ? '#50c878' : '#ff0000'});\n        }\n        */\n        /*\n        if (prevState.block !== block)\n            // Pass the updated hash up to the parent blockchain.\n            this.props.callback(block);\n        }\n        */\n        console.log('BLOCK NUMBER: ', this.state.block.blockNumber);\n    }\n\n    setHash = (hash) => this.setState({ block: { ...this.state.block, hash } });\n    //setData = (data) => this.setState({ block: { ...this.state.block, data } });\n    setField = (key, value) => this.setState({ block: { ...this.state.block, key: value } });\n\n    render() {\n        const color = this.state.color;\n        const block = this.state.block;\n        const { blockNumber, nonce, data, hash } = block;\n        const prevHash = this.props.prevHash;\n\n        return (\n            <Container>\n                <Container\n                    style={{\n                        'width':350,\n                        'height':500,\n                        'background-color':color,\n                    }}\n                >\n                    <Form>\n                        <br/>\n                        <NumberField\n                            label={'Block Number:'}\n                            value={blockNumber}\n                            callback={(blockNumber) => this.setField(blockNumber)}\n                        />\n                        <NumberField\n                            label={'Nonce:'}\n                            value={nonce}\n                            callback={(nonce) => this.setState({...block, nonce})}\n                        />\n                        <TextAreaField\n                            label={'Data:'}\n                            callback={(data) => this.setField(data)}\n                        />\n                        <ReadOnlyTextField\n                            label={'Prev:'}\n                            value={this.props.prevHash}\n                            callback={(prevHash) => this.setState({prevHash})}\n                        />\n                        <ReadOnlyTextField\n                            label={'Hash:'}\n                            value={hash}\n                            callback={(hash) => this.setState({hash})}\n                        />\n                        <br/>\n                        <MineButton\n                            blockNumber={blockNumber}\n                            data={data}\n                            prevHash={this.props.prevHash}\n                            callback={(nonce) => this.setState({nonce})}\n                        />\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}