{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let block = arguments.length > 3 ? arguments[3] : undefined;\n  let setBlock = arguments.length > 4 ? arguments[4] : undefined;\n  let setLocalNonce = arguments.length > 5 ? arguments[5] : undefined;\n  let sequence = null;\n  let hash = \"\";\n\n  for (let nonce = 0; nonce < maximumNonce; nonce++) {\n    hash = sha256(String(blockNumber + nonce + data + prevHash));\n    setLocalNonce(nonce);\n\n    if (hash.substr(0, difficulty) === pattern) {\n      return nonce;\n    }\n  }\n}\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\n\nfunction handleClick() {\n  nonce = mine(blockNumber, data, prevHash, block, setBlock);\n  setBlock({ ...block,\n    nonce\n  });\n}\n\nfunction MineButton(_ref) {\n  _s();\n\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    block,\n    setBlock\n  } = _ref;\n  const [localNonce, setLocalNonce] = useState(0);\n  useEffect(() => {\n    if (localNonce % 10 === 0) {\n      const timeout = setTimeout(() => {\n        setBlock({ ...block,\n          localNonce\n        });\n      }, 1000);\n      return () => clearTimeout(timeout);\n    }\n  }, [localNonce]);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(blockNumber, data, prevHash, block, setBlock),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MineButton, \"2SD+Vg9oXCsECk2H1Uo8K+7kR80=\");\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","block","setBlock","setLocalNonce","sequence","hash","nonce","String","substr","handleClick","MineButton","localNonce","timeout","setTimeout","clearTimeout"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;;AAEA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAA8E;AAAA,MAA7CC,QAA6C,uEAApC,EAAoC;AAAA,MAAhCC,KAAgC;AAAA,MAAzBC,QAAyB;AAAA,MAAfC,aAAe;AAC1E,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGX,YAA5B,EAA0CW,KAAK,EAA/C,EAAmD;AAC/CD,IAAAA,IAAI,GAAGb,MAAM,CAACe,MAAM,CAACT,WAAW,GAAGQ,KAAd,GAAsBP,IAAtB,GAA6BC,QAA9B,CAAP,CAAb;AACAG,IAAAA,aAAa,CAACG,KAAD,CAAb;;AACA,QAAID,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAed,UAAf,MAA+BE,OAAnC,EAA4C;AACxC,aAAOU,KAAP;AACH;AACJ;AACJ;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,WAAT,GAAuB;AACnBH,EAAAA,KAAK,GAAGT,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,QAArC,CAAZ;AACAA,EAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWK,IAAAA;AAAX,GAAD,CAAR;AACH;;AAED,SAASI,UAAT,OAAuE;AAAA;;AAAA,MAAnD;AAACZ,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA;AAAxC,GAAmD;AACnE,QAAM,CAACS,UAAD,EAAaR,aAAb,IAA8Bd,QAAQ,CAAC,CAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqB,UAAU,GAAG,EAAb,KAAoB,CAAxB,EAA2B;AACvB,YAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BX,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWU,UAAAA;AAAX,SAAD,CAAR;AACH,OAFyB,EAEvB,IAFuB,CAA1B;AAIA,aAAO,MAAMG,YAAY,CAACF,OAAD,CAAzB;AACH;AACJ,GARQ,EAQN,CAACD,UAAD,CARM,CAAT;AAUA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMd,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,QAArC,CADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GApBQQ,U;;KAAAA,U;AAoBR;AAED,SAASA,UAAT,EAAqBb,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data, prevHash=\"\", block, setBlock, setLocalNonce) {\n    let sequence = null;\n    let hash = \"\";\n    for (let nonce = 0; nonce < maximumNonce; nonce++) {\n        hash = sha256(String(blockNumber + nonce + data + prevHash));\n        setLocalNonce(nonce);\n        if (hash.substr(0, difficulty) === pattern) {\n            return nonce;\n        }\n    }\n}\n\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\nfunction handleClick() {\n    nonce = mine(blockNumber, data, prevHash, block, setBlock);\n    setBlock({...block, nonce});\n}\n\nfunction MineButton({blockNumber, data, prevHash=\"\", block, setBlock}) {\n    const [localNonce, setLocalNonce] = useState(0);\n\n    useEffect(() => {\n        if (localNonce % 10 === 0) {\n            const timeout = setTimeout(() => {\n                setBlock({...block, localNonce});\n            }, 1000);\n\n            return () => clearTimeout(timeout);\n        }\n    }, [localNonce]);\n\n    return (\n        <Button \n            onClick={() => mine(blockNumber, data, prevHash, block, setBlock)}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}