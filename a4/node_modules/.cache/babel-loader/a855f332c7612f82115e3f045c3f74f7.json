{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n/*\nfunction* nonceIter(blockNumber, data, prevHash) {\n    const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n    const isSigned = hash => hash.substr(0, difficulty) === pattern;\n    let nonce = 0;\n    while (!isSigned(hash(nonce))) {\n        yield nonce;\n        nonce++;\n    }\n}\n*/\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash,\n    callback,\n    block,\n    setBlock\n  } = _ref;\n\n  /*\n  const mine = (nonce = 0) => {\n      const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n      const isSigned = hash => hash.substr(0, difficulty) === pattern;\n      while (!isSigned(hash(nonce))) {\n          nonce++;\n      }\n      return nonce;\n  }   \n  */\n\n  /*\n  const handleClick = () => {\n      let nonce = 0;\n      const interval = setInterval(() => {\n          nonce = nonceIter(blockNumber, data, prevHash).next().value;\n          if (nonce % 10 === 0) {\n              setBlock({...block, nonce}); \n          }\n      }, 1000);\n      return () => clearInterval(interval);\n  }\n  */\n  const handleClick = () => {};\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => handleClick(),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","MineButton","blockNumber","data","prevHash","callback","block","setBlock","handleClick"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,OAA8E;AAAA,MAA1D;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,KAAxC;AAA+CC,IAAAA;AAA/C,GAA0D;;AAC1E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,QAAMC,WAAW,GAAG,MAAM,CAEzB,CAFD;;AAIA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMA,WAAW,EAD9B;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KApCQP,U;AAoCR;AAED,SAASA,UAAT","sourcesContent":["import { useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\n/*\nfunction* nonceIter(blockNumber, data, prevHash) {\n    const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n    const isSigned = hash => hash.substr(0, difficulty) === pattern;\n    let nonce = 0;\n    while (!isSigned(hash(nonce))) {\n        yield nonce;\n        nonce++;\n    }\n}\n*/\n\nfunction MineButton({blockNumber, data, prevHash, callback, block, setBlock}) {\n    /*\n    const mine = (nonce = 0) => {\n        const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n        const isSigned = hash => hash.substr(0, difficulty) === pattern;\n        while (!isSigned(hash(nonce))) {\n            nonce++;\n        }\n        return nonce;\n    }   \n    */\n\n    /*\n    const handleClick = () => {\n        let nonce = 0;\n        const interval = setInterval(() => {\n            nonce = nonceIter(blockNumber, data, prevHash).next().value;\n            if (nonce % 10 === 0) {\n                setBlock({...block, nonce}); \n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }\n    */\n\n    const handleClick = () => {\n\n    }\n\n    return (\n        <Button \n            onClick={() => handleClick()}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}