{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Distributed/Distributed.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport description from './description'; //import {render} from \"react-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet difficulty = 4; // number of zeros required at front of hash\n\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nconst title = description.title;\nconst body = description.body;\n\nclass Block extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pattern: '0'.repeat(difficulty),\n      blockNumber: 1,\n      nonce: 72608,\n      data: \"\",\n      hash: sha256(\"172608\"),\n      //green\n      color: \"#50C878\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: body.split('\\n\\n').map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: paragraph.split('\\n').reduce((total, line) => [total, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 84\n          }, this), line])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        fluid: true,\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onChange: event => {\n            event.preventDefault();\n            this.setState({\n              blockNumber: this.blockNumber.value,\n              nonce: this.nonce.value,\n              data: this.data.value,\n              hash: sha256(this.getSequence()),\n              //red\n              color: \"#F75D59\"\n            });\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Block Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              ref: input => this.blockNumber = input,\n              value: this.state.blockNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Nonce:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              ref: input => this.nonce = input,\n              value: this.state.nonce\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Data:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"text\",\n              placeholder: \"\",\n              ref: input => this.data = input,\n              value: this.state.data\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Hash:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: this.state.hash,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: event => {\n            event.preventDefault();\n            this.mine(this.state.blockNumber, this.state.data);\n          },\n          children: \"Press\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Block;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Distributed/Distributed.js"],"names":["React","Component","Container","Form","Button","sha256","description","difficulty","maximumNonce","title","body","Block","constructor","props","state","pattern","repeat","blockNumber","nonce","data","hash","color","render","split","map","paragraph","reduce","total","line","event","preventDefault","setState","value","getSequence","input","mine"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport description from './description';\n//import {render} from \"react-dom\";\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nconst title = description.title;\nconst body = description.body;\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"172608\"),\n            //green\n            color: \"#50C878\"\n        };\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                                }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}