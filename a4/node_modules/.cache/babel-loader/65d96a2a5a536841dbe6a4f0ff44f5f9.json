{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(_ref) {\n  _s();\n\n  let {\n    block,\n    setBlock\n  } = _ref;\n\n  /*\n  const [blockNumber, setBlockNumber] = useState(block.blockNumber);\n  const [nonce, setNonce] = useState(block.nonce);\n  const [data, setData] = useState(block.data);\n  */\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true); // Set isSigned.\n\n  useEffect(() => {\n    setIsSigned(block.hash.substr(0, difficulty) === pattern ? true : false);\n  }, [block.hash]); // Set color.\n\n  useEffect(() => {\n    setColor(isSigned ? GREEN : RED);\n  }, [isSigned]); // Notify the caller of the changes. \n\n  /*\n  useEffect(() => {\n      //callback({...block, blockNumber, nonce, data});\n      setBlock1({...block, blockNumber, nonce, data});\n  }, [blockNumber, nonce, data]);\n  */\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: block.blockNumber,\n          callback: blockNumber => setBlock1({ ...block,\n            blockNumber\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: block.nonce,\n          callback: nonce => setBlock1({ ...block,\n            nonce\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => setBlock1({ ...block,\n            data\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Previous Hash:',\n          value: block.prevHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: block.hash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: block.blockNumber,\n          data: block.data,\n          prevHash: block.prevHash,\n          callback: nonce => setBlock1({ ...block,\n            nonce\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"BUwuDUSX5+uU3z4/sTucZQ0bup4=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","NumberField","ReadOnlyTextField","TextAreaField","MineButton","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","block","setBlock","color","setColor","isSigned","setIsSigned","hash","substr","blockNumber","setBlock1","nonce","data","prevHash"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock({block, setBlock}) {\n    /*\n    const [blockNumber, setBlockNumber] = useState(block.blockNumber);\n    const [nonce, setNonce] = useState(block.nonce);\n    const [data, setData] = useState(block.data);\n    */\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    // Set isSigned.\n    useEffect(() => {\n        setIsSigned(block.hash.substr(0, difficulty) === pattern ? true : false);\n    }, [block.hash]);\n\n    // Set color.\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    }, [isSigned]);\n\n    // Notify the caller of the changes. \n    /*\n    useEffect(() => {\n        //callback({...block, blockNumber, nonce, data});\n        setBlock1({...block, blockNumber, nonce, data});\n    }, [blockNumber, nonce, data]);\n    */\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={block.blockNumber}\n                        callback={(blockNumber) => setBlock1({...block, blockNumber})}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={block.nonce}\n                        callback={(nonce) => setBlock1({...block, nonce})}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => setBlock1({...block, data})}\n                    />\n                    <ReadOnlyTextField\n                        label={'Previous Hash:'}\n                        value={block.prevHash}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={block.hash}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={block.blockNumber}\n                        data={block.data}\n                        prevHash={block.prevHash}\n                        callback={(nonce) => setBlock1({...block, nonce})}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}