{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blockNumber: props.blockNumber,\n      nonce: 72608,\n      data: \"\",\n      hash: sha256(\"172608\"),\n      color: \"#50c878\",\n      prevHash: \"0000000000000000000000000000000000000000\",\n      signed: true\n    };\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n\n  handleColorChange() {\n    var col = this.state.color;\n    this.props.getColor(col);\n  }\n\n  getHash() {\n    return sha256(this.state.blockNumber.toString() + this.state.nonce.toString() + this.state.data.toString() + this.state.prevHash.toString());\n  }\n\n  getPattern(hash) {\n    return hash.substr(0, difficulty);\n  }\n\n  isSigned() {\n    return this.getPattern(this.state.hash) === pattern && this.getPattern(this.state.prevHash) === pattern ? true : false;\n  }\n\n  componentDidMount() {\n    let nonce = mine(this.state.blockNumber, this.state.data);\n    this.setState({\n      nonce\n    });\n    let hash = this.getHash();\n    this.setState({\n      hash\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let hash = this.getHash();\n\n    if (prevState.hash !== hash) {\n      this.setState({\n        hash\n      }); // Pass the updated hash up to the parent blockchain.\n\n      let response = {\n        blockNumber: this.state.blockNumber,\n        hash: this.state.hash\n      };\n      this.props.callback(response);\n    }\n\n    let prevHash = this.prevHash;\n\n    if (prevState.prevHash !== prevHash) {\n      this.setState({\n        prevHash\n      });\n    }\n\n    let signed = this.isSigned();\n\n    if (prevState.signed !== signed) {\n      this.setState({\n        signed\n      });\n      this.setState({\n        color: signed ? '#50c878' : '#ff0000'\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          'width': 350,\n          'height': 500,\n          'background-color': this.state.color\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Block Number:',\n            value: this.state.blockNumber,\n            callback: blockNumber => this.setState({\n              blockNumber\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Nonce:',\n            value: this.state.nonce,\n            callback: nonce => this.setState({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n            label: 'Data:',\n            callback: data => this.setState({\n              data\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Prev:',\n            value: this.props.prevHash\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Hash:',\n            value: this.state.hash\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n            blockNumber: this.state.blockNumber,\n            data: this.state.data,\n            prevHash: this.state.prevHash,\n            callback: nonce => this.setState({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","Component","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","SingleBlock","constructor","props","state","blockNumber","nonce","data","hash","color","prevHash","signed","handleColorChange","bind","col","getColor","getHash","toString","getPattern","substr","isSigned","componentDidMount","setState","componentDidUpdate","prevProps","prevState","response","callback","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blockNumber: props.blockNumber,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"172608\"),\n            color: \"#50c878\",\n            prevHash: \"0000000000000000000000000000000000000000\",\n            signed: true\n        };\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)\n    }\n\n    getHash() {\n        return sha256(this.state.blockNumber.toString() + this.state.nonce.toString() + this.state.data.toString() + this.state.prevHash.toString());\n    }\n\n    getPattern(hash) {\n        return hash.substr(0, difficulty);\n    }\n\n    isSigned() {\n        return (this.getPattern(this.state.hash) === pattern && this.getPattern(this.state.prevHash) === pattern) ? true : false;\n    }\n\n    componentDidMount() {\n        let nonce = mine(this.state.blockNumber, this.state.data);\n        this.setState({nonce});\n        let hash = this.getHash();\n        this.setState({hash});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        let hash = this.getHash();\n        if (prevState.hash !== hash) {\n            this.setState({hash});\n\n            // Pass the updated hash up to the parent blockchain.\n            let response = {blockNumber: this.state.blockNumber, hash: this.state.hash};\n            this.props.callback(response);\n        }\n\n        let prevHash = this.prevHash;\n        if (prevState.prevHash !== prevHash) {\n            this.setState({prevHash});\n        }\n\n        let signed = this.isSigned();\n        if (prevState.signed !== signed) {\n            this.setState({signed});\n            this.setState({color: signed ? '#50c878' : '#ff0000'});\n        }\n   \n\n    }\n\n    render() {\n        return (\n            <Container>\n                <Container\n                    style={{\n                        'width':350,\n                        'height':500,\n                        'background-color':this.state.color\n                    }}\n                >\n                    <Form>\n                        <br/>\n                        <NumberField\n                            label={'Block Number:'}\n                            value={this.state.blockNumber}\n                            callback={(blockNumber) => this.setState({blockNumber})}\n                        />\n                        <NumberField\n                            label={'Nonce:'}\n                            value={this.state.nonce}\n                            callback={(nonce) => this.setState({nonce})}\n                        />\n                        <TextAreaField\n                            label={'Data:'}\n                            callback={(data) => this.setState({data})}\n                        />\n                        <ReadOnlyTextField\n                            label={'Prev:'}\n                            value={this.props.prevHash}\n                        />\n                        <ReadOnlyTextField\n                            label={'Hash:'}\n                            value={this.state.hash}\n                        />\n                        <br/>\n                        <MineButton\n                            blockNumber={this.state.blockNumber}\n                            data={this.state.data}\n                            prevHash={this.state.prevHash}\n                            callback={(nonce) => this.setState({nonce})}\n                        />\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}