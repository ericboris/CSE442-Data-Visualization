{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n/* Find a nonce s.t. the hash of the string concatenation of\n * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n * that starts with n=difficulty many zeros.\n */\n\nfunction mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let sequence = null;\n  let hash = null;\n\n  for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n    sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n    hash = sha256(sequence);\n\n    if (hash.substr(0, difficulty) === pattern) {\n      return nonce;\n    }\n  }\n}\n\nfunction simulateMining() {\n  return new Promise(resolve => setTimeout(resolve, 3000));\n}\n\nfunction MineButton(_ref) {\n  _s();\n\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    callback\n  } = _ref;\n  const [isLoading, setLoading] = useState(false);\n  useEffect(() => {\n    if (isLoading) {\n      simulateMining().then(() => {\n        setLoading(false);\n      }).then(() => {\n        callback(mine(blockNumber, data, prevHash));\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => {\n    setLoading(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null,\n    children: !isLoading ? 'Mine!' : 'Mining...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MineButton, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","sequence","hash","nonce","toString","substr","simulateMining","Promise","resolve","setTimeout","MineButton","callback","isLoading","setLoading","then","handleClick"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;AAEA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAA8C;AAAA,MAAbC,QAAa,uEAAJ,EAAI;AAC1C,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,IAAI,GAAG,IAAX;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIR,YAA7B,EAA2CQ,KAAK,EAAhD,EAAoD;AAChDF,IAAAA,QAAQ,GAAGH,WAAW,CAACM,QAAZ,KAAyBD,KAAK,CAACC,QAAN,EAAzB,GAA4CL,IAAI,CAACK,QAAL,EAA5C,GAA8DJ,QAAQ,CAACI,QAAT,EAAzE;AACAF,IAAAA,IAAI,GAAGV,MAAM,CAACS,QAAD,CAAb;;AACA,QAAIC,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeX,UAAf,MAA+BE,OAAnC,EAA4C;AACxC,aAAOO,KAAP;AACH;AACJ;AACJ;;AAED,SAASG,cAAT,GAA0B;AACtB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAP;AACH;;AAED,SAASE,UAAT,OAAgE;AAAA;;AAAA,MAA5C;AAACZ,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCW,IAAAA;AAAjC,GAA4C;AAC5D,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BxB,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,SAAJ,EAAe;AACXN,MAAAA,cAAc,GAAGQ,IAAjB,CAAsB,MAAM;AACxBD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAFD,EAEGC,IAFH,CAEQ,MAAM;AACVH,QAAAA,QAAQ,CAACd,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,CAAL,CAAR;AACH,OAJD;AAKH;AACJ,GARQ,EAQN,CAACY,SAAD,CARM,CAAT;;AAUA,QAAMG,WAAW,GAAG,MAAM;AACtBF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAFD;;AAIA,sBACI,QAAC,MAAD;AACI,IAAA,QAAQ,EAAED,SADd;AAEI,IAAA,OAAO,EAAE,CAACA,SAAD,GAAaG,WAAb,GAA2B,IAFxC;AAAA,cAIK,CAACH,SAAD,GAAa,OAAb,GAAuB;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAzBQF,U;;KAAAA,U;AAyBR;AAED,SAASA,UAAT,EAAqBb,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\n/* Find a nonce s.t. the hash of the string concatenation of\n * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n * that starts with n=difficulty many zeros.\n */\nfunction mine(blockNumber, data, prevHash=\"\") {\n    let sequence = null;\n    let hash = null;\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n        sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n        hash = sha256(sequence);\n        if (hash.substr(0, difficulty) === pattern) {\n            return nonce;\n        }\n    }\n}\n\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 3000));\n}\n\nfunction MineButton({blockNumber, data, prevHash=\"\", callback}) {\n    const [isLoading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (isLoading) {\n            simulateMining().then(() => {\n                setLoading(false);\n            }).then(() => {\n                callback(mine(blockNumber, data, prevHash));\n            });\n        }\n    }, [isLoading]);\n\n    const handleClick = () => {\n        setLoading(true);\n    }\n\n    return (\n        <Button \n            disabled={isLoading}\n            onClick={!isLoading ? handleClick : null}\n        >\n            {!isLoading ? 'Mine!' : 'Mining...'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}