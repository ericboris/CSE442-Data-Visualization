{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty; // number of zeros required at front of hash\n\nconst maximumNonce = MineSettings.maximumNonce; // limit the nonce to this so we don't mine too long\n\nconst pattern = MineSettings.pattern;\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    callback\n  } = _ref;\n\n  /* Find a nonce s.t. the hash of the string concatenation of\n   * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n   * that starts with n=difficulty many zeros.\n   */\n  function mine(blockNumber, data) {\n    console.log('MineSettings: ', MineSettings);\n    console.log('difficulty: ', difficulty);\n    console.log('maximumNonce: ', maximumNonce);\n    console.log('pattern: ', pattern);\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = blockNumber.toString() + nonce.toString() + data.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === pattern) {\n        return nonce;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: event => {\n      callback(mine(blockNumber, data));\n      event.preventDefault();\n    },\n    children: \"Mine!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport default MineButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["Button","sha256","MineSettings","difficulty","maximumNonce","pattern","MineButton","blockNumber","data","callback","mine","console","log","sequence","hash","nonce","toString","substr","event","preventDefault"],"mappings":";AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC,C,CAAmD;;AACnD,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC,C,CAAgD;;AAChD,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;;AAEA,SAASC,UAAT,OAAmD;AAAA,MAA/B;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,GAA+B;;AAC/C;AACJ;AACA;AACA;AACI,WAASC,IAAT,CAAcH,WAAd,EAA2BC,IAA3B,EAAiC;AAC7BG,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BV,YAA9B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BT,UAA5B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,YAA9B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,OAAzB;AAEA,QAAIQ,QAAQ,GAAG,IAAf;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIX,YAA7B,EAA2CW,KAAK,EAAhD,EAAoD;AAChDF,MAAAA,QAAQ,GAAGN,WAAW,CAACS,QAAZ,KAAyBD,KAAK,CAACC,QAAN,EAAzB,GAA4CR,IAAI,CAACQ,QAAL,EAAvD;AACAF,MAAAA,IAAI,GAAGb,MAAM,CAACY,QAAD,CAAb;;AACA,UAAIC,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAed,UAAf,MAA+BE,OAAnC,EAA4C;AACxC,eAAOU,KAAP;AACH;AACJ;AACJ;;AAED,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAGG,KAAD,IAAW;AACxBT,MAAAA,QAAQ,CAACC,IAAI,CAACH,WAAD,EAAcC,IAAd,CAAL,CAAR;AACAU,MAAAA,KAAK,CAACC,cAAN;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KA9BQb,U;AA8BR;AAED,eAAeA,UAAf","sourcesContent":["import { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\nconst difficulty = MineSettings.difficulty;        // number of zeros required at front of hash\nconst maximumNonce = MineSettings.maximumNonce; // limit the nonce to this so we don't mine too long\nconst pattern = MineSettings.pattern;\n\nfunction MineButton({blockNumber, data, callback}) {\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     */\n    function mine(blockNumber, data) {\n        console.log('MineSettings: ', MineSettings);\n        console.log('difficulty: ', difficulty);\n        console.log('maximumNonce: ', maximumNonce);\n        console.log('pattern: ', pattern);\n\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === pattern) {\n                return nonce;\n            }\n        }\n    }\n\n    return (\n        <Button onClick={(event) => {\n            callback(mine(blockNumber, data));\n            event.preventDefault();\n        }}>\n            Mine!\n        </Button>\n    );\n};\n\nexport default MineButton;\n"]},"metadata":{},"sourceType":"module"}