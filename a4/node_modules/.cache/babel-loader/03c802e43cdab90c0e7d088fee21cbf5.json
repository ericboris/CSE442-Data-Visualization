{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Row } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from './Fields';\nimport { MineButton } from './MineButton';\nimport MineSettings from './MineSettings';\nimport { sha256 } from 'js-sha256';\nimport { SwitchButton } from './Switch';\nimport { RED, GREEN, DARK_RED, DARK_GREEN } from './ColorSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\n/*\nconst GREEN = '#90be6d';\nconst RED = '#F9844A';\nconst redBORDER = '#F9C74F';\nconst greenBORDER = '#4D908E';\n*/\n\nfunction SingleBlock(_ref) {\n  _s();\n\n  let {\n    block,\n    setBlock\n  } = _ref;\n  const {\n    blockNumber,\n    nonce,\n    data,\n    prevHash,\n    hash\n  } = block;\n  const [isSwitchOn, setIsSwitchOn] = useState(false);\n\n  const isSigned = () => hash.substr(0, difficulty) === pattern; // Set the hash.\n\n\n  useEffect(() => {\n    setBlock({\n      blockNumber,\n      nonce,\n      data,\n      prevHash,\n      hash: sha256(blockNumber + nonce + data + prevHash)\n    });\n  }, [blockNumber, nonce, data, prevHash, setBlock]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      'width': 350,\n      'height': 525,\n      'backgroundColor': isSigned() ? GREEN : RED,\n      'border': '5px solid',\n      'borderColor': isSigned() ? DARK_GREEN : DARK_RED\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(NumberField, {\n        label: 'Block Number:',\n        value: blockNumber,\n        callback: blockNumber => setBlock({ ...block,\n          blockNumber\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n        label: 'Nonce:',\n        value: nonce,\n        callback: nonce => setBlock({ ...block,\n          nonce\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n        label: 'Data:',\n        callback: data => setBlock({ ...block,\n          data\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n        label: 'Previous Hash:',\n        value: prevHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n        label: 'Hash:',\n        value: hash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"g-2\",\n        children: [/*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: blockNumber,\n          data: data,\n          prevHash: prevHash,\n          block: block,\n          setBlock: setBlock,\n          isSwitchOn: isSwitchOn,\n          nonce: nonce\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SwitchButton, {\n          isSwitchOn: isSwitchOn,\n          setIsSwitchOn: setIsSwitchOn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"e6f8qtdhmRToi1USmmlfzsiXS8g=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","Row","NumberField","ReadOnlyTextField","TextAreaField","MineButton","MineSettings","sha256","SwitchButton","RED","GREEN","DARK_RED","DARK_GREEN","difficulty","pattern","SingleBlock","block","setBlock","blockNumber","nonce","data","prevHash","hash","isSwitchOn","setIsSwitchOn","isSigned","substr"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form, Row } from 'react-bootstrap';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from './Fields';\nimport { MineButton } from './MineButton';\nimport MineSettings from './MineSettings';\nimport { sha256 } from 'js-sha256';\nimport { SwitchButton } from './Switch';\nimport { RED, GREEN, DARK_RED, DARK_GREEN } from './ColorSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \n/*\nconst GREEN = '#90be6d';\nconst RED = '#F9844A';\nconst redBORDER = '#F9C74F';\nconst greenBORDER = '#4D908E';\n*/\n\nfunction SingleBlock({block, setBlock}) {\n    const {blockNumber, nonce, data, prevHash, hash} = block;\n    const [isSwitchOn, setIsSwitchOn] = useState(false);\n    const isSigned = () => hash.substr(0, difficulty) === pattern;\n\n    // Set the hash.\n    useEffect(() => {\n        setBlock({\n            blockNumber, \n            nonce, \n            data, \n            prevHash, \n            hash: sha256(blockNumber + nonce + data + prevHash)\n        });\n    }, [blockNumber, nonce, data, prevHash, setBlock]);\n\n    return (\n        <Container\n            style={{\n                'width':350,\n                'height':525,\n                'backgroundColor':isSigned() ? GREEN : RED,\n                'border': '5px solid',\n                'borderColor': isSigned() ? DARK_GREEN : DARK_RED,\n            }}\n        >\n            <Form>\n                <NumberField\n                    label={'Block Number:'}\n                    value={blockNumber}\n                    callback={(blockNumber) => setBlock({...block, blockNumber})}\n                />\n                <NumberField\n                    label={'Nonce:'}\n                    value={nonce}\n                    callback={(nonce) => setBlock({...block, nonce})}\n                />\n                <TextAreaField\n                    label={'Data:'}\n                    callback={(data) => setBlock({...block, data})}\n                />\n                <ReadOnlyTextField\n                    label={'Previous Hash:'}\n                    value={prevHash}\n                />\n                <ReadOnlyTextField\n                    label={'Hash:'}\n                    value={hash}\n                />\n                <br/>\n                <Row className=\"g-2\">\n                    <MineButton\n                        blockNumber={blockNumber}\n                        data={data}\n                        prevHash={prevHash}\n                        block={block}\n                        setBlock={setBlock}\n                        isSwitchOn = {isSwitchOn}\n                        nonce = {nonce}\n                    />\n                    <SwitchButton\n                        isSwitchOn = {isSwitchOn}\n                        setIsSwitchOn={setIsSwitchOn}\n                    />\n                </Row>\n\n            </Form>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}