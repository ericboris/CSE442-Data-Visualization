{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/Blockchain.js\";\nimport React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport SingleBlock from './SingleBlock';\nimport { mine } from '../MineButton';\nimport { sha256 } from 'js-sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultNumBlocks = 3;\n\nclass Blockchain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blocks: this.initBlocks(defaultNumBlocks)\n    };\n  }\n  /* Return numBlocks many blocks with pre-filled data */\n\n\n  initBlocks(numBlocks) {\n    // Return either hashLength many zeros or the previous block's hash.\n    let hashLength = 64;\n\n    const getPrevHash = i => i === 0 ? '0'.repeat(hashLength) : blocks[i - 1].hash;\n\n    let blocks = [];\n\n    for (let i = 0; i < numBlocks; i++) {\n      let blockNumber = (i + 1).toString();\n      let data = '';\n      let prevHash = getPrevHash(i).toString();\n      let nonce = mine(blockNumber, data, prevHash).toString();\n      let hash = sha256(blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString());\n      let block = {\n        blockNumber,\n        nonce,\n        data,\n        prevHash,\n        hash\n      };\n      blocks.push(block);\n    } //console.log(\"INIT BLOCKS: \", blocks);\n\n\n    return blocks;\n  } // Update a block in the list.\n\n\n  setBlock(response) {\n    let index = response.index;\n    let block = response.block;\n    let blocks = [...this.state.blocks];\n    blocks[index] = block;\n    this.setState({\n      blocks\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let blocks = [...this.state.blocks]; // If a block is changed update the next block's prevHash.\n\n    for (let i = 1; i < blocks.length; i++) {\n      if (blocks[i].prevHash != blocks[i - 1].hash) {\n        blocks[i].prevHash = blocks[i - 1].hash;\n        this.setBlock({\n          index: i,\n          block: blocks[i]\n        });\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row justify-content-around\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(SingleBlock, {\n            index: 0,\n            block: this.state.blocks[0],\n            callback: response => this.setBlock(response)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(SingleBlock, {\n            index: 1,\n            block: this.state.blocks[1],\n            callback: response => this.setBlock(response)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(SingleBlock, {\n            index: 2,\n            block: this.state.blocks[2],\n            callback: response => this.setBlock(response)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Blockchain;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/Blockchain.js"],"names":["React","Component","Container","SingleBlock","mine","sha256","defaultNumBlocks","Blockchain","constructor","props","state","blocks","initBlocks","numBlocks","hashLength","getPrevHash","i","repeat","hash","blockNumber","toString","data","prevHash","nonce","block","push","setBlock","response","index","setState","componentDidUpdate","prevProps","prevState","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport SingleBlock from './SingleBlock';\nimport { mine } from '../MineButton';\nimport { sha256 } from 'js-sha256';\n\nconst defaultNumBlocks = 3;\n\nclass Blockchain extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blocks: this.initBlocks(defaultNumBlocks)\n        }\n    }\n\n    /* Return numBlocks many blocks with pre-filled data */\n    initBlocks(numBlocks) {\n        // Return either hashLength many zeros or the previous block's hash.\n        let hashLength = 64;\n        const getPrevHash = (i) => i === 0 ? '0'.repeat(hashLength) : blocks[i - 1].hash;\n\n        let blocks = [];\n        for (let i = 0; i < numBlocks; i++) {\n            let blockNumber = (i + 1).toString();\n            let data = '';\n            let prevHash = getPrevHash(i).toString();\n            let nonce = mine(blockNumber, data, prevHash).toString();\n            let hash = sha256(blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString());\n            let block = {blockNumber, nonce, data, prevHash, hash};\n            blocks.push(block);\n        }\n        //console.log(\"INIT BLOCKS: \", blocks);\n        return blocks;\n    }\n\n    // Update a block in the list.\n    setBlock(response) {\n        let index = response.index;\n        let block = response.block;\n        let blocks = [...this.state.blocks];\n        blocks[index] = block;\n        this.setState({blocks});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        let blocks = [...this.state.blocks];\n        // If a block is changed update the next block's prevHash.\n        for (let i = 1; i < blocks.length; i++) {\n            if (blocks[i].prevHash != blocks[i-1].hash) {\n                blocks[i].prevHash = blocks[i-1].hash;\n                this.setBlock({index: i, block: blocks[i]});\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Container fluid>\n            \n                <div class = \"row justify-content-around\" >\n                    <div class = \"col-sm-4\">\n                        <SingleBlock index={0} block={this.state.blocks[0]} callback={(response) => this.setBlock(response)} />\n                    </div>\n                    <div class = \"col-sm-4\">\n                        <SingleBlock index={1} block={this.state.blocks[1]} callback={(response) => this.setBlock(response)} />\n                    </div>\n                    <div class = \"col-sm-4\">\n                        <SingleBlock index={2} block={this.state.blocks[2]} callback={(response) => this.setBlock(response)} />\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default Blockchain;\n"]},"metadata":{},"sourceType":"module"}