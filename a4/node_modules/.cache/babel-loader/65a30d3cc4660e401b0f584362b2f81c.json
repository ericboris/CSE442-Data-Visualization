{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let block = arguments.length > 3 ? arguments[3] : undefined;\n  let setBlock = arguments.length > 4 ? arguments[4] : undefined;\n  let sequence = null;\n  let hash = \"\";\n\n  for (let nonce = 0; nonce < maximumNonce; nonce++) {\n    hash = sha256(String(blockNumber + ++nonce + data + prevHash)); //setTimeout(() => {setBlock({...block, nonce})}, 1000);\n\n    console.log(\"NONCE OUT\", nonce);\n    setTimeout(() => {\n      //setBlock({...block, nonce});\n      console.log(\"NONCE IN\", nonce);\n    }, 1000 * nonce);\n  }\n}\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    block,\n    setBlock\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(blockNumber, data, prevHash, block, setBlock),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","block","setBlock","sequence","hash","nonce","String","console","log","setTimeout","MineButton"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;;AAEA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAA+D;AAAA,MAA9BC,QAA8B,uEAArB,EAAqB;AAAA,MAAjBC,KAAiB;AAAA,MAAVC,QAAU;AAC3D,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,YAA5B,EAA0CU,KAAK,EAA/C,EAAmD;AAC/CD,IAAAA,IAAI,GAAGZ,MAAM,CAACc,MAAM,CAACR,WAAW,GAAI,EAAEO,KAAjB,GAA0BN,IAA1B,GAAiCC,QAAlC,CAAP,CAAb,CAD+C,CAE/C;;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,KAAzB;AACAI,IAAAA,UAAU,CAAC,MAAM;AACb;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,KAAxB;AACH,KAHS,EAGP,OAAOA,KAHA,CAAV;AAIH;AACJ;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASK,UAAT,OAAuE;AAAA,MAAnD;AAACZ,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA;AAAxC,GAAmD;AACnE,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAML,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,QAArC,CADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KARQQ,U;AAQR;AAED,SAASA,UAAT,EAAqBb,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction mine(blockNumber, data, prevHash=\"\", block, setBlock) {\n    let sequence = null;\n    let hash = \"\";\n    for (let nonce = 0; nonce < maximumNonce; nonce++) {\n        hash = sha256(String(blockNumber + (++nonce) + data + prevHash));\n        //setTimeout(() => {setBlock({...block, nonce})}, 1000);\n        console.log(\"NONCE OUT\", nonce);\n        setTimeout(() => {\n            //setBlock({...block, nonce});\n            console.log(\"NONCE IN\", nonce);\n        }, 1000 * nonce);\n    }\n}\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\nfunction MineButton({blockNumber, data, prevHash=\"\", block, setBlock}) {\n    return (\n        <Button \n            onClick={() => mine(blockNumber, data, prevHash, block, setBlock)}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}