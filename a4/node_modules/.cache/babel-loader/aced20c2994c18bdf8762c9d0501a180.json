{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n  _s();\n\n  const [block, setBlock] = useState(props.block);\n  /*\n  const [blockNumber, setBlockNumber] = useState(String(props.block.blockNumber));\n  const [nonce, setNonce] = useState(String(props.block.nonce));\n  const [data, setData] = useState(String(props.block.data));\n  const [prevHash, setPrevHash] = useState(String(props.block.prevHash));\n  const [hash, setHash] = useState(String(props.block.hash));\n  */\n\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true);\n  useEffect(() => {\n    setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n  }, [blockNumber, nonce, data, prevHash]);\n  useEffect(() => {\n    setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n  }, [hash]);\n  useEffect(() => {\n    setColor(isSigned ? GREEN : RED);\n  }, [isSigned]);\n  useEffect(() => {\n    /*\n    const response = {\n        blockNumber, \n        nonce,\n        data,\n        prevHash, \n        hash\n    };\n    props.callback(response);\n    }, [blockNumber, nonce, data, prevHash, hash]);\n    */\n    props.callback(block);\n  }, [block]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: blockNumber,\n          callback: blockNumber => setBlockNumber(String(blockNumber))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: nonce,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => setData(String(data))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Prev:',\n          value: props.block.prevHash,\n          callback: prevHash => setPrevHash(String(prevHash))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: hash,\n          callback: hash => setHash(String(hash))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: blockNumber,\n          data: data,\n          prevHash: prevHash,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"U5zGFjv9NTzaMJO0fiqO/iFFVfw=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","props","block","setBlock","color","setColor","isSigned","setIsSigned","setHash","String","blockNumber","nonce","data","prevHash","hash","substr","callback","setBlockNumber","setNonce","setData","setPrevHash"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n    const [block, setBlock] = useState(props.block);\n    /*\n    const [blockNumber, setBlockNumber] = useState(String(props.block.blockNumber));\n    const [nonce, setNonce] = useState(String(props.block.nonce));\n    const [data, setData] = useState(String(props.block.data));\n    const [prevHash, setPrevHash] = useState(String(props.block.prevHash));\n    const [hash, setHash] = useState(String(props.block.hash));\n    */\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    useEffect(() => {\n        setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n    }, [blockNumber, nonce, data, prevHash]);\n\n    useEffect(() => {\n        setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n    }, [hash]);\n\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    }, [isSigned]);\n\n    useEffect(() => {\n        /*\n        const response = {\n            blockNumber, \n            nonce,\n            data,\n            prevHash, \n            hash\n        };\n        props.callback(response);\n    }, [blockNumber, nonce, data, prevHash, hash]);\n    */\n        props.callback(block);\n    }, [block]);\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={blockNumber}\n                        callback={(blockNumber) => setBlockNumber(String(blockNumber))}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={nonce}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => setData(String(data))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Prev:'}\n                        value={props.block.prevHash}\n                        callback={(prevHash) => setPrevHash(String(prevHash))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={hash}\n                        callback={(hash) => setHash(String(hash))}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={blockNumber}\n                        data={data}\n                        prevHash={prevHash}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}