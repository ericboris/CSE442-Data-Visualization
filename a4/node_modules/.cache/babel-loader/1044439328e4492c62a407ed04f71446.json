{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton(_ref) {\n  _s();\n\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    block,\n    setBlock,\n    isSwitchOn\n  } = _ref;\n\n  // Get the hash of the given inputs.\n  const hash = nonce => {\n    return sha256(blockNumber + nonce + data + prevHash);\n  }; // Return true if the hash is signed and false otherwise.\n\n\n  const isSigned = hash => hash.substr(0, difficulty) === pattern; // Recursively search for the nonce that results in a signed hash\n  // Show every 10 results.\n\n\n  const mineDelay = nonce => {\n    const timer = setTimeout(() => {\n      if (isSigned(hash(nonce))) {\n        setIsMining(false);\n        setBlock({ ...block,\n          nonce\n        });\n        return;\n      } else if (nonce % 5 === 0) {\n        setBlock({ ...block,\n          nonce\n        });\n      }\n\n      mineDelay(nonce + 1);\n    });\n  };\n\n  const mine = () => {\n    //let sequence = null;\n    //let hash = null;\n    for (let nonce = 0; nonce <= maxNonce; nonce++) {\n      //sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n      //hash = sha256(sequence);\n      if (isSigned(hash(nonce))) {\n        setIsMining(false);\n        setBlock({ ...block,\n          nonce\n        });\n        return;\n      }\n    }\n  }; // Begin mining.\n\n\n  const handleClick = () => {\n    if (!isMining) {\n      setIsMining(true);\n\n      if (isSwitchOn) {\n        mineDelay(0);\n      } else {\n        mine(blockNumber, data, prevHash);\n      }\n    }\n  }; // Used to set the button text.\n\n\n  const [isMining, setIsMining] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => handleClick(),\n    children: isMining ? 'Mining...' : 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MineButton, \"xaXcXWkzzLRueKEqFaqfEisno/4=\");\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","MineButton","blockNumber","data","prevHash","block","setBlock","isSwitchOn","hash","nonce","isSigned","substr","mineDelay","timer","setTimeout","setIsMining","mine","handleClick","isMining"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;;AAEA,SAASC,UAAT,OAAmF;AAAA;;AAAA,MAA/D;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA;AAAlD,GAA+D;;AAC/E;AACA,QAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,WAAOd,MAAM,CAACO,WAAW,GAAGO,KAAd,GAAsBN,IAAtB,GAA6BC,QAA9B,CAAb;AACH,GAFD,CAF+E,CAM/E;;;AACA,QAAMM,QAAQ,GAAIF,IAAD,IAAUA,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAed,UAAf,MAA+BG,OAA1D,CAP+E,CAS/E;AACA;;;AACA,QAAMY,SAAS,GAAIH,KAAD,IAAW;AACzB,UAAMI,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3B,UAAIJ,QAAQ,CAACF,IAAI,CAACC,KAAD,CAAL,CAAZ,EAA2B;AACvBM,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAT,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,UAAAA;AAAX,SAAD,CAAR;AACA;AACH,OAJD,MAIO,IAAIA,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACxBH,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,UAAAA;AAAX,SAAD,CAAR;AACH;;AACDG,MAAAA,SAAS,CAACH,KAAK,GAAG,CAAT,CAAT;AACH,KATuB,CAAxB;AAUH,GAXD;;AAaA,QAAMO,IAAI,GAAG,MAAM;AACf;AACA;AACA,SAAK,IAAIP,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIX,QAA7B,EAAuCW,KAAK,EAA5C,EAAgD;AAC5C;AACA;AACA,UAAIC,QAAQ,CAACF,IAAI,CAACC,KAAD,CAAL,CAAZ,EAA2B;AACvBM,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAT,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,UAAAA;AAAX,SAAD,CAAR;AACA;AACH;AACJ;AACJ,GAZD,CAxB+E,CAsC/E;;;AACA,QAAMQ,WAAW,GAAG,MAAM;AACtB,QAAI,CAACC,QAAL,EAAe;AACXH,MAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,UAAGR,UAAH,EAAc;AACVK,QAAAA,SAAS,CAAC,CAAD,CAAT;AACH,OAFD,MAEO;AACHI,QAAAA,IAAI,CAACd,WAAD,EAAcC,IAAd,EAAoBC,QAApB,CAAJ;AACH;AACJ;AACJ,GATD,CAvC+E,CAkD/E;;;AACA,QAAM,CAACc,QAAD,EAAWH,WAAX,IAA0BvB,QAAQ,CAAC,KAAD,CAAxC;AAEA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMyB,WAAW,EAD9B;AAAA,cAGKC,QAAQ,GAAG,WAAH,GAAiB;AAH9B;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA5DQjB,U;;KAAAA,U;AA4DR;AAED,SAASA,UAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton({blockNumber, data, prevHash=\"\", block, setBlock, isSwitchOn}) {\n    // Get the hash of the given inputs.\n    const hash = (nonce) => {\n        return sha256(blockNumber + nonce + data + prevHash); \n    }\n\n    // Return true if the hash is signed and false otherwise.\n    const isSigned = (hash) => hash.substr(0, difficulty) === pattern;\n\n    // Recursively search for the nonce that results in a signed hash\n    // Show every 10 results.\n    const mineDelay = (nonce) => {\n        const timer = setTimeout(() => {\n            if (isSigned(hash(nonce))) {\n                setIsMining(false);\n                setBlock({...block, nonce});\n                return;\n            } else if (nonce % 5 === 0) {\n                setBlock({...block, nonce});\n            }\n            mineDelay(nonce + 1);\n        });\n    }\n\n    const mine = () => {\n        //let sequence = null;\n        //let hash = null;\n        for (let nonce = 0; nonce <= maxNonce; nonce++) {\n            //sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n            //hash = sha256(sequence);\n            if (isSigned(hash(nonce))) {\n                setIsMining(false);\n                setBlock({...block, nonce});\n                return;\n            }\n        }\n    }\n\n    // Begin mining.\n    const handleClick = () => {\n        if (!isMining) {\n            setIsMining(true);\n            if(isSwitchOn){\n                mineDelay(0)\n            } else {\n                mine(blockNumber, data, prevHash)\n            }\n        }\n    }\n\n    // Used to set the button text.\n    const [isMining, setIsMining] = useState(false);\n\n    return (\n        <Button \n            onClick={() => handleClick()}\n        >\n            {isMining ? 'Mining...' : 'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}