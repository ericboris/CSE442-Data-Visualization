{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getHashableBlock = block => Object.fromEntries(Object.entries(block).filter(_ref => {\n      let [key] = _ref;\n      return key !== 'hash';\n    }));\n\n    this.getStringValues = obj => Object.values(hashableBlock).map(field => field.toString()).join('');\n\n    this.isSigned = hash => hash.substr(0, difficulty) === pattern ? true : false;\n\n    this.setBlockNumber = blockNumber => this.setState({\n      block: { ...this.state.block,\n        blockNumber\n      }\n    });\n\n    this.setNonce = nonce => this.setState({\n      block: { ...this.state.block,\n        nonce\n      }\n    });\n\n    this.setData = data => this.setState({\n      block: { ...this.state.block,\n        data\n      }\n    });\n\n    this.setPrevHash = prevHash => this.setState({\n      block: { ...this.state.block,\n        prevHash\n      }\n    });\n\n    this.setHash = hash => this.setState({\n      block: { ...this.state.block,\n        hash\n      }\n    });\n\n    this.state = {\n      index: props.index,\n      block: props.block,\n      color: \"#50c878\",\n      signed: true\n    };\n  } // Return a hashable block with fields that shouldn't be hashed removed.\n\n\n  /* Given a block return its hash.\n   * Assumes the block only contains fields that should be hashed plus \n   * a hash field, which is excluded.\n   */\n  getHash(block) {\n    block = this.getHashableBlock(block);\n    let values = this.getStringValues(block);\n    return sha256(values);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevHash = this.props.prevHash;\n\n    if (prevHash !== prevState.block.preHash) {\n      this.setPrevHash(prevHash);\n    } // If this hash has changed, update the hash and notify the caller.\n\n\n    const hash = this.getHash(this.state.block);\n\n    if (prevState.block.hash !== hash) {\n      this.setHash(hash);\n    }\n\n    let signed = this.isSigned(hash);\n\n    if (prevState.signed !== signed) {\n      this.setState({\n        signed\n      });\n      this.setState({\n        color: signed ? '#50c878' : '#ff0000'\n      });\n    }\n\n    if (prevState.block != this.state.block) {\n      this.props.callback({\n        index: this.state.index,\n        block: this.state.block\n      });\n    }\n  } // Define a collection of functions for updating this block's fields.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          'width': 350,\n          'height': 500,\n          'background-color': this.state.color\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Block Number:',\n            value: this.state.block.blockNumber,\n            callback: blockNumber => this.setBlockNumber(blockNumber)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Nonce:',\n            value: this.state.block.nonce,\n            callback: nonce => this.setNonce(nonce)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n            label: 'Data:',\n            callback: data => this.setData(data)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Previous Hash:',\n            value: this.props.block.prevHash,\n            callback: prevHash => this.setPrevHash(prevHash)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Hash:',\n            value: this.state.block.hash,\n            callback: hash => this.setHash(hash)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n            blockNumber: this.props.block.blockNumber,\n            data: this.props.block.data,\n            prevHash: this.props.block.prevHash,\n            callback: nonce => this.setNonce({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","Component","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","SingleBlock","constructor","props","getHashableBlock","block","Object","fromEntries","entries","filter","key","getStringValues","obj","values","hashableBlock","map","field","toString","join","isSigned","hash","substr","setBlockNumber","blockNumber","setState","state","setNonce","nonce","setData","data","setPrevHash","prevHash","setHash","index","color","signed","getHash","componentDidUpdate","prevProps","prevState","preHash","callback","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: props.index,\n            block: props.block,\n            color: \"#50c878\",\n            signed: true\n        };\n    }\n\n    // Return a hashable block with fields that shouldn't be hashed removed.\n    getHashableBlock = (block) => Object.fromEntries(Object.entries(block).filter(([key]) => key !== 'hash'));\n\n    // Return a string by concatenating an objects values as strings.\n    getStringValues = (obj) => Object.values(hashableBlock).map(field => field.toString()).join('');\n\n    // Returns true if the hash is signed and false otherwise.\n    isSigned = (hash) => (hash.substr(0, difficulty) === pattern) ? true : false;\n\n    /* Given a block return its hash.\n     * Assumes the block only contains fields that should be hashed plus \n     * a hash field, which is excluded.\n     */\n    getHash(block) {\n        block = this.getHashableBlock(block);\n        let values = this.getStringValues(block);\n        return sha256(values);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const prevHash = this.props.prevHash;\n        if (prevHash !== prevState.block.preHash) {\n           this.setPrevHash(prevHash); \n        }\n\n        // If this hash has changed, update the hash and notify the caller.\n        const hash = this.getHash(this.state.block);\n        if (prevState.block.hash !== hash) {\n            this.setHash(hash);\n        }\n    \n        let signed = this.isSigned(hash);\n        if (prevState.signed !== signed) {\n            this.setState({signed});\n            this.setState({color: signed ? '#50c878' : '#ff0000'});\n        }\n\n        if (prevState.block != this.state.block) {\n            this.props.callback({index: this.state.index, block: this.state.block});\n        }\n    }\n\n    // Define a collection of functions for updating this block's fields.\n    setBlockNumber = (blockNumber) => this.setState({ block: { ...this.state.block, blockNumber } });\n    setNonce = (nonce) => this.setState({ block: { ...this.state.block, nonce } });\n    setData = (data) => this.setState({ block: { ...this.state.block, data } });\n    setPrevHash = (prevHash) => this.setState({ block: { ...this.state.block, prevHash } });\n    setHash = (hash) => this.setState({ block: { ...this.state.block, hash } });\n\n    render() {\n        return (\n            <Container>\n                <Container\n                    style={{\n                        'width':350,\n                        'height':500,\n                        'background-color':this.state.color,\n                    }}\n                >\n                    <Form>\n                        <br/>\n                        <NumberField\n                            label={'Block Number:'}\n                            value={this.state.block.blockNumber}\n                            callback={(blockNumber) => this.setBlockNumber(blockNumber)}\n                        />\n                        <NumberField\n                            label={'Nonce:'}\n                            value={this.state.block.nonce}\n                            callback={(nonce) => this.setNonce(nonce)}\n                        />\n                        <TextAreaField\n                            label={'Data:'}\n                            callback={(data) => this.setData(data)}\n                        />\n                        <ReadOnlyTextField\n                            label={'Previous Hash:'}\n                            value={this.props.block.prevHash}\n                            callback={(prevHash) => this.setPrevHash(prevHash)}\n                        />\n                        <ReadOnlyTextField\n                            label={'Hash:'}\n                            value={this.state.block.hash}\n                            callback={(hash) => this.setHash(hash)}\n                        />\n                        <br/>\n                        <MineButton\n                            blockNumber={this.props.block.blockNumber}\n                            data={this.props.block.data}\n                            prevHash={this.props.block.prevHash}\n                            callback={(nonce) => this.setNonce({nonce})}\n                        />\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}