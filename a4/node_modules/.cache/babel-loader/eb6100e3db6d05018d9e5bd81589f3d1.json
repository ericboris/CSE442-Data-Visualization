{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256'; //import {render} from \"react-dom\";\n\nimport get from '../descriptionLoader';\nimport { BlockNumberField, DataField, HashField, NonceField } from './Fields';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet difficulty = 4; // number of zeros required at front of hash\n\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pattern: '0'.repeat(difficulty),\n      blockNumber: 1,\n      nonce: 72608,\n      data: \"\",\n      hash: sha256(\"1\" + \"72608\" + \"\"),\n      //green\n      color: \"#50C878\"\n    };\n    this.getSequence = this.getSequence.bind(this);\n    this.mine = this.mine.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n\n  handleColorChange() {\n    var col = this.state.color;\n    this.props.getColor(col);\n  }\n\n  getSequence() {\n    return this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString();\n  }\n  /* Find a nonce s.t. the hash of the string concatenation of\n   * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n   * that starts with n=difficulty many zeros.\n   * Updates the state with the found nonce and hash.\n   */\n\n\n  mine(blockNumber, data) {\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = blockNumber.toString() + nonce.toString() + data.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === this.state.pattern) {\n        this.setState({\n          hash,\n          nonce\n        });\n        return;\n      }\n    }\n\n    this.setState({\n      color: \"#50C878\"\n    });\n    this.handleColorChange(this.state.color);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onChange: event => {\n          event.preventDefault();\n          this.setState({\n            //blockNumber: this.blockNumber.value,\n            nonce: this.nonce.value,\n            data: this.data.value,\n            //hash : sha256(this.getSequence()),\n            //red\n            color: \"#F75D59\"\n          });\n        },\n        children: [/*#__PURE__*/_jsxDEV(BlockNumberField, {\n          callback: blockNumber => this.setState({\n            blockNumber\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(NonceField, {\n          callback: blockNumber => this.setState({\n            blockNumber\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Data:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            type: \"text\",\n            placeholder: \"\",\n            ref: input => this.data = input,\n            value: this.state.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Hash:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: this.state.hash,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: event => {\n          event.preventDefault();\n          this.mine(this.state.blockNumber, this.state.data);\n        },\n        children: \"Mine!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/SingleBlock.js"],"names":["React","Component","Container","Form","Button","sha256","get","BlockNumberField","DataField","HashField","NonceField","difficulty","maximumNonce","SingleBlock","constructor","props","state","pattern","repeat","blockNumber","nonce","data","hash","color","getSequence","bind","mine","handleColorChange","col","getColor","value","toString","sequence","substr","setState","render","event","preventDefault","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\nimport get from '../descriptionLoader';\nimport { BlockNumberField, DataField, HashField, NonceField } from './Fields';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            //green\n            color: \"#50C878\"\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)        \n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    mine(blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n        this.setState({color: \"#50C878\"});\n        this.handleColorChange(this.state.color);\n\n   }\n\n    render() {\n        return (\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            //blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            //hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                       <BlockNumberField callback={(blockNumber) => this.setState({blockNumber})} />\n                       <NonceField callback={(blockNumber) => this.setState({blockNumber})} />\n                       <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Mine!\n                    </Button>\n                </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}