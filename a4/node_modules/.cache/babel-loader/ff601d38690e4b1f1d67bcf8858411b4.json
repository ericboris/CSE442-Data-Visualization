{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = 4; // number of zeros required at front of hash\n\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction MineButton(_ref) {\n  let {\n    callback,\n    pattern,\n    blockNumber,\n    data\n  } = _ref;\n\n  /* Find a nonce s.t. the hash of the string concatenation of\n   * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n   * that starts with n=difficulty many zeros.\n   */\n  function mine(pattern, blockNumber, data) {\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = blockNumber.toString() + nonce.toString() + data.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === pattern) {\n        return nonce;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: event => {\n      callback(mine(pattern, blockNumber, data));\n      event.preventDefault();\n    },\n    children: \"Mine!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport default MineButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["Button","sha256","difficulty","maximumNonce","MineButton","callback","pattern","blockNumber","data","mine","sequence","hash","nonce","toString","substr","event","preventDefault"],"mappings":";AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAnB,C,CAA6B;;AAC7B,MAAMC,YAAY,GAAG,MAArB,C,CAA6B;;AAE7B,SAASC,UAAT,OAA4D;AAAA,MAAxC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,GAAwC;;AACxD;AACJ;AACA;AACA;AACI,WAASC,IAAT,CAAcH,OAAd,EAAuBC,WAAvB,EAAoCC,IAApC,EAA0C;AACtC,QAAIE,QAAQ,GAAG,IAAf;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIT,YAA7B,EAA2CS,KAAK,EAAhD,EAAoD;AAChDF,MAAAA,QAAQ,GAAGH,WAAW,CAACM,QAAZ,KAAyBD,KAAK,CAACC,QAAN,EAAzB,GAA4CL,IAAI,CAACK,QAAL,EAAvD;AACAF,MAAAA,IAAI,GAAGV,MAAM,CAACS,QAAD,CAAb;;AACA,UAAIC,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAeZ,UAAf,MAA+BI,OAAnC,EAA4C;AACxC,eAAOM,KAAP;AACH;AACJ;AACJ;;AAED,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAGG,KAAD,IAAW;AACxBV,MAAAA,QAAQ,CAACI,IAAI,CAACH,OAAD,EAAUC,WAAV,EAAuBC,IAAvB,CAAL,CAAR;AACAO,MAAAA,KAAK,CAACC,cAAN;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KAzBQZ,U;AAyBR;AAED,eAAeA,UAAf","sourcesContent":["import { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n\nconst difficulty = 4;        // number of zeros required at front of hash\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction MineButton({callback, pattern, blockNumber, data}) {\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     */\n    function mine(pattern, blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === pattern) {\n                return nonce;\n            }\n        }\n    }\n\n    return (\n        <Button onClick={(event) => {\n            callback(mine(pattern, blockNumber, data));\n            event.preventDefault();\n        }}>\n            Mine!\n        </Button>\n    );\n};\n\nexport default MineButton;\n"]},"metadata":{},"sourceType":"module"}