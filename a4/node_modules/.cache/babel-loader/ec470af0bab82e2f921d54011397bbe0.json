{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Mine.js\";\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = 4; // number of zeros required at front of hash\n\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction Mine(_ref) {\n  let {\n    pattern,\n    blockNumber,\n    data\n  } = _ref;\n\n  /* Find a nonce s.t. the hash of the string concatenation of\n   * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n   * that starts with n=difficulty many zeros.\n   * Updates the state with the found nonce and hash.\n   */\n  function mine(pattern, blockNumber, data) {\n    console.log(\"PATTERN: \", {\n      pattern\n    });\n    console.log(\"BLOCK NUM: \", {\n      blockNumber\n    }.value);\n    console.log(\"DATA: \", {\n      data\n    });\n    let sequence = null;\n    let hash = null;\n\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n      sequence = {\n        blockNumber\n      }.toString() + nonce.toString() + {\n        data\n      }.toString();\n      hash = sha256(sequence);\n\n      if (hash.substr(0, difficulty) === {\n        pattern\n      }) {\n        console.log(\"MINE RESULT: \", {\n          nonce,\n          hash\n        }); //return {nonce, hash};\n\n        return;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: event => {\n      mine({\n        pattern\n      }, {\n        blockNumber\n      }, {\n        data\n      });\n      event.preventDefault();\n    },\n    children: \"Mine!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Mine;\n;\nexport default Mine;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mine\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Mine.js"],"names":["Button","sha256","difficulty","maximumNonce","Mine","pattern","blockNumber","data","mine","console","log","value","sequence","hash","nonce","toString","substr","event","preventDefault"],"mappings":";AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAnB,C,CAA6B;;AAC7B,MAAMC,YAAY,GAAG,MAArB,C,CAA6B;;AAE7B,SAASC,IAAT,OAA4C;AAAA,MAA9B;AAACC,IAAAA,OAAD;AAAUC,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,GAA8B;;AACxC;AACJ;AACA;AACA;AACA;AACI,WAASC,IAAT,CAAcH,OAAd,EAAuBC,WAAvB,EAAoCC,IAApC,EAA0C;AACtCE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB;AAACL,MAAAA;AAAD,KAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B;AAACJ,MAAAA;AAAD,MAAcK,KAAzC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB;AAACH,MAAAA;AAAD,KAAtB;AACA,QAAIK,QAAQ,GAAG,IAAf;AACA,QAAIC,IAAI,GAAG,IAAX;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAIX,YAA7B,EAA2CW,KAAK,EAAhD,EAAoD;AAChDF,MAAAA,QAAQ,GAAG;AAACN,QAAAA;AAAD,QAAcS,QAAd,KAA2BD,KAAK,CAACC,QAAN,EAA3B,GAA8C;AAACR,QAAAA;AAAD,QAAOQ,QAAP,EAAzD;AACAF,MAAAA,IAAI,GAAGZ,MAAM,CAACW,QAAD,CAAb;;AACA,UAAIC,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAed,UAAf,MAA+B;AAACG,QAAAA;AAAD,OAAnC,EAA8C;AAC1CI,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B;AAACI,UAAAA,KAAD;AAAQD,UAAAA;AAAR,SAA7B,EAD0C,CAE1C;;AACA;AACH;AACJ;AACL;;AAEA,sBACI,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAGI,KAAD,IAAW;AACxBT,MAAAA,IAAI,CAAC;AAACH,QAAAA;AAAD,OAAD,EAAY;AAACC,QAAAA;AAAD,OAAZ,EAA2B;AAACC,QAAAA;AAAD,OAA3B,CAAJ;AACAU,MAAAA,KAAK,CAACC,cAAN;AACH,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KA/BQd,I;AA+BR;AAED,eAAeA,IAAf","sourcesContent":["import { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n\nconst difficulty = 4;        // number of zeros required at front of hash\nconst maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nfunction Mine({pattern, blockNumber, data}) {\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    function mine(pattern, blockNumber, data) {\n        console.log(\"PATTERN: \", {pattern});\n        console.log(\"BLOCK NUM: \", {blockNumber}.value);\n        console.log(\"DATA: \", {data});\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = {blockNumber}.toString() + nonce.toString() + {data}.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === {pattern}) {\n                console.log(\"MINE RESULT: \", {nonce, hash}); \n                //return {nonce, hash};\n                return;\n            }\n        }\n   }\n\n    return (\n        <Button onClick={(event) => {\n            mine({pattern}, {blockNumber}, {data});\n            event.preventDefault();\n        }}>\n            Mine!\n        </Button>\n    );\n};\n\nexport default Mine;\n"]},"metadata":{},"sourceType":"module"}