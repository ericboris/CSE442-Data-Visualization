{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton(_ref) {\n  _s();\n\n  let {\n    blockNumber,\n    data,\n    prevHash,\n    callback,\n    block,\n    setBlock\n  } = _ref;\n\n  // Get the hash of the given inputs.\n  const hash = (blockNumber, nonce, data, prevHash) => {\n    return sha256(blockNumber + nonce + data + prevHash);\n  }; // Return true if the hash is signed and false otherwise.\n\n\n  const isSigned = hash => hash.substr(0, difficulty) === pattern;\n\n  const [isMining, setIsMining] = useState(false); // Recursively search for the nonce that results in a signed hash\n  // showing every 10 results.\n\n  const mineDelay = nonce => {\n    const timer = setTimeout(() => {\n      if (isSigned(hash(blockNumber, nonce, data, prevHash))) {\n        setBlock({ ...block,\n          nonce\n        });\n        setIsMining(false);\n        return;\n      } else if (nonce % 10 === 0) {\n        setBlock({ ...block,\n          nonce\n        });\n      }\n\n      mineDelay(nonce + 1);\n    });\n  }; // Begin mining.\n\n\n  const handleClick = () => {\n    if (!isMining) {\n      setIsMining(true);\n      mineDelay(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => handleClick(),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MineButton, \"xaXcXWkzzLRueKEqFaqfEisno/4=\");\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","MineButton","blockNumber","data","prevHash","callback","block","setBlock","hash","nonce","isSigned","substr","isMining","setIsMining","mineDelay","timer","setTimeout","handleClick"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;;AAEA,SAASC,UAAT,OAA8E;AAAA;;AAAA,MAA1D;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,KAAxC;AAA+CC,IAAAA;AAA/C,GAA0D;;AAC1E;AACA,QAAMC,IAAI,GAAG,CAACN,WAAD,EAAcO,KAAd,EAAqBN,IAArB,EAA2BC,QAA3B,KAAwC;AACjD,WAAOT,MAAM,CAACO,WAAW,GAAGO,KAAd,GAAsBN,IAAtB,GAA6BC,QAA9B,CAAb;AACH,GAFD,CAF0E,CAM1E;;;AACA,QAAMM,QAAQ,GAAIF,IAAD,IAAUA,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAed,UAAf,MAA+BG,OAA1D;;AAEA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC,CAT0E,CAW1E;AACA;;AACA,QAAMsB,SAAS,GAAIL,KAAD,IAAW;AACzB,UAAMM,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3B,UAAIN,QAAQ,CAACF,IAAI,CAACN,WAAD,EAAcO,KAAd,EAAqBN,IAArB,EAA2BC,QAA3B,CAAL,CAAZ,EAAwD;AACpDG,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,UAAAA;AAAX,SAAD,CAAR;AACAI,QAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACH,OAJD,MAIO,IAAIJ,KAAK,GAAG,EAAR,KAAe,CAAnB,EAAsB;AACzBF,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,UAAAA;AAAX,SAAD,CAAR;AACH;;AAEDK,MAAAA,SAAS,CAACL,KAAK,GAAG,CAAT,CAAT;AACH,KAVuB,CAAxB;AAWH,GAZD,CAb0E,CA2B1E;;;AACA,QAAMQ,WAAW,GAAG,MAAM;AACtB,QAAI,CAACL,QAAL,EAAe;AACXC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACH;AACJ,GALD;;AAOA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMG,WAAW,EAD9B;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA1CQhB,U;;KAAAA,U;AA0CR;AAED,SAASA,UAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton({blockNumber, data, prevHash, callback, block, setBlock}) {\n    // Get the hash of the given inputs.\n    const hash = (blockNumber, nonce, data, prevHash) => {\n        return sha256(blockNumber + nonce + data + prevHash); \n    }\n\n    // Return true if the hash is signed and false otherwise.\n    const isSigned = (hash) => hash.substr(0, difficulty) === pattern;\n\n    const [isMining, setIsMining] = useState(false);\n\n    // Recursively search for the nonce that results in a signed hash\n    // showing every 10 results.\n    const mineDelay = (nonce) => {\n        const timer = setTimeout(() => {\n            if (isSigned(hash(blockNumber, nonce, data, prevHash))) {\n                setBlock({...block, nonce});\n                setIsMining(false);\n                return;\n            } else if (nonce % 10 === 0) {\n                setBlock({...block, nonce});\n            }\n\n            mineDelay(nonce + 1);\n        });\n    }\n\n    // Begin mining.\n    const handleClick = () => {\n        if (!isMining) {\n            setIsMining(true);\n            mineDelay(0)\n        }\n    }\n\n    return (\n        <Button \n            onClick={() => handleClick()}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}