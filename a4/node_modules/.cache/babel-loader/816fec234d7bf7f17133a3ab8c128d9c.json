{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setBlockNumber = blockNumber => this.setState({\n      block: { ...this.state.block,\n        blockNumber\n      }\n    });\n\n    this.setNonce = nonce => this.setState({\n      block: { ...this.state.block,\n        nonce\n      }\n    });\n\n    this.setData = data => this.setState({\n      block: { ...this.state.block,\n        data\n      }\n    });\n\n    this.setPrevHash = prevHash => this.setState({\n      block: { ...this.state.block,\n        prevHash\n      }\n    });\n\n    this.setHash = hash => this.setState({\n      block: { ...this.state.block,\n        hash\n      }\n    });\n\n    this.state = {\n      block: props.block,\n      color: \"#50c878\",\n      signed: true\n    };\n  }\n  /* Given a block return its hash.\n   * Assumes the block only contains fields that should be hashed plus \n   * a hash field, which is excluded.\n   */\n\n\n  getHash(block) {\n    // If one exists, remove a 'hash' field from the block.\n    let filteredBlock = Object.fromEntries(Object.entries(block).filter(_ref => {\n      let [key] = _ref;\n      return key !== 'hash';\n    }));\n    console.log(\"F BLOCK: \", filteredBlock); // And concatenate the remaining field values into a string.\n\n    let str = Object.values(filteredBlock).map(field => field.toString()).join('');\n    console.log(\"STR: \", str);\n    let result = sha256(str);\n    console.log(\"RESULT: \", result);\n    return sha256(str);\n  }\n\n  isSigned(hash) {\n    return hash.substr(0, difficulty) === pattern ? true : false;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const hash = this.getHash(this.state.block); // If this hash has changed, update the hash and notify the caller.\n\n    if (prevState.block.hash !== hash) {\n      this.setHash(hash);\n    }\n\n    if (prevState.block != this.state.block) {\n      this.props.callback({\n        index: this.props.index,\n        block: this.state.block\n      });\n    }\n\n    let signed = this.isSigned(hash);\n\n    if (prevState.signed !== signed) {\n      this.setState({\n        signed\n      });\n      this.setState({\n        color: signed ? '#50c878' : '#ff0000'\n      });\n    }\n  } // Define a collection of functions for updating this block's fields.\n\n\n  render() {\n    const color = this.state.color;\n    const {\n      blockNumber,\n      nonce,\n      data,\n      hash\n    } = this.state.block;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          'width': 350,\n          'height': 500,\n          'background-color': color\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Block Number:',\n            value: blockNumber,\n            callback: blockNumber => this.setBlockNumber(blockNumber)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Nonce:',\n            value: nonce,\n            callback: nonce => this.setNonce(nonce)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n            label: 'Data:',\n            callback: data => this.setData(data)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Previous Hash:',\n            value: this.props.block.prevHash,\n            callback: prevHash => this.setPrevHash(prevHash)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Hash:',\n            value: hash,\n            callback: hash => this.setHash(hash)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n            blockNumber: blockNumber,\n            data: data,\n            prevHash: this.props.prevHash,\n            callback: nonce => this.setNonce({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","Component","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","SingleBlock","constructor","props","setBlockNumber","blockNumber","setState","block","state","setNonce","nonce","setData","data","setPrevHash","prevHash","setHash","hash","color","signed","getHash","filteredBlock","Object","fromEntries","entries","filter","key","console","log","str","values","map","field","toString","join","result","isSigned","substr","componentDidUpdate","prevProps","prevState","callback","index","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            block: props.block,\n            color: \"#50c878\",\n            signed: true\n        };\n    }\n\n    /* Given a block return its hash.\n     * Assumes the block only contains fields that should be hashed plus \n     * a hash field, which is excluded.\n     */\n    getHash(block) {\n        // If one exists, remove a 'hash' field from the block.\n        let filteredBlock = Object.fromEntries(Object.entries(block).filter(([key]) => key !== 'hash'));\n        console.log(\"F BLOCK: \", filteredBlock);\n        // And concatenate the remaining field values into a string.\n        let str = Object.values(filteredBlock).map(field => field.toString()).join('');\n        console.log(\"STR: \", str);\n        let result = sha256(str);\n        console.log(\"RESULT: \", result);\n        return sha256(str);\n    }\n\n    isSigned(hash) {\n        return (hash.substr(0, difficulty) === pattern) ? true : false;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const hash = this.getHash(this.state.block);\n        \n        // If this hash has changed, update the hash and notify the caller.\n        if (prevState.block.hash !== hash) {\n            this.setHash(hash);\n                }\n\n        if (prevState.block != this.state.block) {\n            this.props.callback({index: this.props.index, block: this.state.block});\n        }\n\n        let signed = this.isSigned(hash);\n        if (prevState.signed !== signed) {\n            this.setState({signed});\n            this.setState({color: signed ? '#50c878' : '#ff0000'});\n        }\n    }\n\n    // Define a collection of functions for updating this block's fields.\n    setBlockNumber = (blockNumber) => this.setState({ block: { ...this.state.block, blockNumber } });\n    setNonce = (nonce) => this.setState({ block: { ...this.state.block, nonce } });\n    setData = (data) => this.setState({ block: { ...this.state.block, data } });\n    setPrevHash = (prevHash) => this.setState({ block: { ...this.state.block, prevHash } });\n    setHash = (hash) => this.setState({ block: { ...this.state.block, hash } });\n\n    render() {\n        const color = this.state.color;\n        const { blockNumber, nonce, data, hash } = this.state.block;\n\n        return (\n            <Container>\n                <Container\n                    style={{\n                        'width':350,\n                        'height':500,\n                        'background-color':color,\n                    }}\n                >\n                    <Form>\n                        <br/>\n                        <NumberField\n                            label={'Block Number:'}\n                            value={blockNumber}\n                            callback={(blockNumber) => this.setBlockNumber(blockNumber)}\n                        />\n                        <NumberField\n                            label={'Nonce:'}\n                            value={nonce}\n                            callback={(nonce) => this.setNonce(nonce)}\n                        />\n                        <TextAreaField\n                            label={'Data:'}\n                            callback={(data) => this.setData(data)}\n                        />\n                        <ReadOnlyTextField\n                            label={'Previous Hash:'}\n                            value={this.props.block.prevHash}\n                            callback={(prevHash) => this.setPrevHash(prevHash)}\n                        />\n                        <ReadOnlyTextField\n                            label={'Hash:'}\n                            value={hash}\n                            callback={(hash) => this.setHash(hash)}\n                        />\n                        <br/>\n                        <MineButton\n                            blockNumber={blockNumber}\n                            data={data}\n                            prevHash={this.props.prevHash}\n                            callback={(nonce) => this.setNonce({nonce})}\n                        />\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}