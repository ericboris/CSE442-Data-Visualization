{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\";\nimport React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      block: props.block,\n      color: \"#50c878\",\n      signed: true\n    };\n  }\n\n  getHash(fields) {\n    let str = '';\n\n    for (let f = 0; f < fields.length; f++) {\n      str += f.toString();\n    }\n\n    return sha256(str);\n  }\n\n  getPattern(hash) {\n    return hash.substr(0, difficulty);\n  }\n\n  isSigned() {\n    return this.getPattern(this.state.hash) === pattern ? true : false;\n  }\n  /*\n  componentDidMount() {\n      // let nonce = mine(this.state.blockNumber, this.state.data, this.props.prevHash);\n      // this.setState({nonce});\n      let hash = this.getHash();\n      this.setState({hash});\n      let prevHash = '0000000000000000000000000000000000000000000000000000000000000000';\n      this.setState({prevHash});\n  }\n  */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    let fields = Object.keys(this.state.block);\n    console.log('FIELDS: ', fields);\n    /*\n    let hash = this.getHash();\n    if (prevState.hash !== hash) {\n        this.setState({hash});\n         // Pass the updated hash up to the parent blockchain.\n        let response = {blockIndex: this.props.blockIndex, hash: this.state.hash};\n        this.props.callback(response);\n    }\n    */\n\n    /*\n    //let prevHash = this.props.prevHash;\n    if (prevState.prevHash !== prevHash) {\n        this.setState({prevHash});\n    }\n    */\n\n    /*\n    let signed = this.isSigned();\n    //console.log(\"BlockNum: \", this.state.blockNumber, \" PrevHash: \", this.props.prevHash);\n    if (prevState.signed !== signed) {\n        this.setState({signed});\n        this.setState({color: signed ? '#50c878' : '#ff0000'});\n    }\n    */\n  }\n\n  render() {\n    const color = this.state.color;\n    const {\n      blockNumber,\n      nonce,\n      data,\n      hash\n    } = this.state.block;\n    const prevHash = this.props.prevHash;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        style: {\n          'width': 350,\n          'height': 500,\n          'background-color': color\n        },\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Block Number:',\n            value: blockNumber,\n            callback: blockNumber => this.setState({\n              blockNumber\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n            label: 'Nonce:',\n            value: nonce,\n            callback: nonce => this.setState({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n            label: 'Data:',\n            callback: data => this.setState({\n              data\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Prev:',\n            value: this.props.prevHash,\n            callback: prevHash => this.setState({\n              prevHash\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n            label: 'Hash:',\n            value: hash,\n            callback: hash => this.setState({\n              hash\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n            blockNumber: blockNumber,\n            data: data,\n            prevHash: this.props.prevHash,\n            callback: nonce => this.setState({\n              nonce\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default SingleBlock;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","Component","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","SingleBlock","constructor","props","state","block","color","signed","getHash","fields","str","f","length","toString","getPattern","hash","substr","isSigned","componentDidUpdate","prevProps","prevState","Object","keys","console","log","render","blockNumber","nonce","data","prevHash","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            block: props.block,\n            color: \"#50c878\",\n            signed: true\n        };\n    }\n\n    getHash(fields) {\n        let str = '';\n        for (let f = 0; f < fields.length; f++) {\n            str += f.toString();\n        }\n        return sha256(str);\n    }\n\n    getPattern(hash) {\n        return hash.substr(0, difficulty);\n    }\n\n    isSigned() {\n        return (this.getPattern(this.state.hash) === pattern) ? true : false;\n    }\n\n    /*\n    componentDidMount() {\n        // let nonce = mine(this.state.blockNumber, this.state.data, this.props.prevHash);\n        // this.setState({nonce});\n        let hash = this.getHash();\n        this.setState({hash});\n        let prevHash = '0000000000000000000000000000000000000000000000000000000000000000';\n        this.setState({prevHash});\n    }\n    */\n\n    componentDidUpdate(prevProps, prevState) {\n        let fields = Object.keys(this.state.block);\n        console.log('FIELDS: ', fields);\n\n        /*\n        let hash = this.getHash();\n        if (prevState.hash !== hash) {\n            this.setState({hash});\n\n            // Pass the updated hash up to the parent blockchain.\n            let response = {blockIndex: this.props.blockIndex, hash: this.state.hash};\n            this.props.callback(response);\n        }\n        */\n\n        /*\n        //let prevHash = this.props.prevHash;\n        if (prevState.prevHash !== prevHash) {\n            this.setState({prevHash});\n        }\n        */\n        /*\n        let signed = this.isSigned();\n        //console.log(\"BlockNum: \", this.state.blockNumber, \" PrevHash: \", this.props.prevHash);\n        if (prevState.signed !== signed) {\n            this.setState({signed});\n            this.setState({color: signed ? '#50c878' : '#ff0000'});\n        }\n        */\n    }\n\n    render() {\n        const color = this.state.color;\n        const { blockNumber, nonce, data, hash } = this.state.block;\n        const prevHash = this.props.prevHash;\n\n        return (\n            <Container>\n                <Container\n                    style={{\n                        'width':350,\n                        'height':500,\n                        'background-color':color,\n                    }}\n                >\n                    <Form>\n                        <br/>\n                        <NumberField\n                            label={'Block Number:'}\n                            value={blockNumber}\n                            callback={(blockNumber) => this.setState({blockNumber})}\n                        />\n                        <NumberField\n                            label={'Nonce:'}\n                            value={nonce}\n                            callback={(nonce) => this.setState({nonce})}\n                        />\n                        <TextAreaField\n                            label={'Data:'}\n                            callback={(data) => this.setState({data})}\n                        />\n                        <ReadOnlyTextField\n                            label={'Prev:'}\n                            value={this.props.prevHash}\n                            callback={(prevHash) => this.setState({prevHash})}\n                        />\n                        <ReadOnlyTextField\n                            label={'Hash:'}\n                            value={hash}\n                            callback={(hash) => this.setState({hash})}\n                        />\n                        <br/>\n                        <MineButton\n                            blockNumber={blockNumber}\n                            data={data}\n                            prevHash={this.props.prevHash}\n                            callback={(nonce) => this.setState({nonce})}\n                        />\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}