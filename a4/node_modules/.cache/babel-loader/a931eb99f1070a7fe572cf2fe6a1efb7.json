{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n/* Find a nonce s.t. the hash of the string concatenation of\n * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n * that starts with n=difficulty many zeros.\n */\n\n/*\nfunction mine(blockNumber, data, prevHash=\"\") {\n   let sequence = null;\n   let hash = null;\n   for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n       sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n       hash = sha256(sequence);\n       if (hash.substr(0, difficulty) === pattern) {\n           return nonce;\n       }\n   }\n}\n*/\n\nfunction* mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let sequence = null;\n  let nonce = 0;\n  let hash = sha256(String(blockNumber + nonce + data + prevHash));\n\n  while (hash.substr(0, difficulty) !== pattern) {\n    //for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n    yield nonce++;\n    hash = sha256(String(blockNumber + nonce + data + prevHash));\n  }\n}\n\nfunction simulateMining() {\n  return new Promise(resolve => setTimeout(resolve, 1000));\n}\n\nfunction MineButton(_ref) {\n  _s();\n\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    callback,\n    block,\n    setBlock\n  } = _ref;\n  const [isLoading, setLoading] = useState(false);\n  const mineIter = mine(blockNumber, data, prevHash);\n  useEffect(() => {\n    if (isLoading) {\n      simulateMining().then(() => {\n        setLoading(false);\n      }).then(() => {\n        let nonce = mineIter.next().value;\n        console.log(\"NONCE\", nonce);\n        callback(nonce);\n      });\n    }\n  }, [isLoading]);\n\n  const handleClick = () => {\n    setLoading(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    disabled: isLoading,\n    onClick: !isLoading ? handleClick : null,\n    children: !isLoading ? 'Mine!' : 'Mining...'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MineButton, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","sequence","nonce","hash","String","substr","simulateMining","Promise","resolve","setTimeout","MineButton","callback","block","setBlock","isLoading","setLoading","mineIter","then","next","value","console","log","handleClick"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;AAEA;AACA;AACA;AACA;;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,IAAV,CAAeC,WAAf,EAA4BC,IAA5B,EAA+C;AAAA,MAAbC,QAAa,uEAAJ,EAAI;AAC3C,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAGX,MAAM,CAACY,MAAM,CAACN,WAAW,GAAGI,KAAd,GAAsBH,IAAtB,GAA6BC,QAA9B,CAAP,CAAjB;;AACA,SAAOG,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeX,UAAf,MAA+BE,OAAtC,EAA+C;AAC/C;AACI,UAAMM,KAAK,EAAX;AACAC,IAAAA,IAAI,GAAGX,MAAM,CAACY,MAAM,CAACN,WAAW,GAAGI,KAAd,GAAsBH,IAAtB,GAA6BC,QAA9B,CAAP,CAAb;AACH;AACJ;;AAGD,SAASM,cAAT,GAA0B;AACtB,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAnC,CAAP;AACH;;AAED,SAASE,UAAT,OAAiF;AAAA;;AAAA,MAA7D;AAACZ,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCW,IAAAA,QAAjC;AAA2CC,IAAAA,KAA3C;AAAkDC,IAAAA;AAAlD,GAA6D;AAC7E,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0B1B,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM2B,QAAQ,GAAGnB,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,CAArB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,SAAJ,EAAe;AACXR,MAAAA,cAAc,GAAGW,IAAjB,CAAsB,MAAM;AACxBF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAFD,EAEGE,IAFH,CAEQ,MAAM;AACV,YAAIf,KAAK,GAAGc,QAAQ,CAACE,IAAT,GAAgBC,KAA5B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBnB,KAArB;AACAS,QAAAA,QAAQ,CAACT,KAAD,CAAR;AACH,OAND;AAOH;AACJ,GAVQ,EAUN,CAACY,SAAD,CAVM,CAAT;;AAYA,QAAMQ,WAAW,GAAG,MAAM;AACtBP,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAFD;;AAIA,sBACI,QAAC,MAAD;AACI,IAAA,QAAQ,EAAED,SADd;AAEI,IAAA,OAAO,EAAE,CAACA,SAAD,GAAaQ,WAAb,GAA2B,IAFxC;AAAA,cAIK,CAACR,SAAD,GAAa,OAAb,GAAuB;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA5BQJ,U;;KAAAA,U;AA4BR;AAED,SAASA,UAAT,EAAqBb,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\n/* Find a nonce s.t. the hash of the string concatenation of\n * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n * that starts with n=difficulty many zeros.\n */\n /*\nfunction mine(blockNumber, data, prevHash=\"\") {\n    let sequence = null;\n    let hash = null;\n    for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n        sequence = blockNumber.toString() + nonce.toString() + data.toString() + prevHash.toString();\n        hash = sha256(sequence);\n        if (hash.substr(0, difficulty) === pattern) {\n            return nonce;\n        }\n    }\n}\n*/\n\nfunction* mine(blockNumber, data, prevHash=\"\") {\n    let sequence = null;\n    let nonce = 0;\n    let hash = sha256(String(blockNumber + nonce + data + prevHash));\n    while (hash.substr(0, difficulty) !== pattern) {\n    //for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n        yield nonce++;\n        hash = sha256(String(blockNumber + nonce + data + prevHash));\n    }\n}\n\n\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 1000));\n}\n\nfunction MineButton({blockNumber, data, prevHash=\"\", callback, block, setBlock}) {\n    const [isLoading, setLoading] = useState(false);\n    const mineIter = mine(blockNumber, data, prevHash);\n\n    useEffect(() => {\n        if (isLoading) {\n            simulateMining().then(() => {\n                setLoading(false);\n            }).then(() => {\n                let nonce = mineIter.next().value;\n                console.log(\"NONCE\", nonce);\n                callback(nonce);\n            });\n        }\n    }, [isLoading]);\n\n    const handleClick = () => {\n        setLoading(true);\n    }\n\n    return (\n        <Button \n            disabled={isLoading}\n            onClick={!isLoading ? handleClick : null}\n        >\n            {!isLoading ? 'Mine!' : 'Mining...'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}