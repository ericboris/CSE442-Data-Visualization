{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n  _s();\n\n  //const [block, setBlock] = useState(props.block);\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true);\n  /*\n  // Update the hash.\n  useEffect(() => {\n      setBlock({...block, hash:(String(sha256(block.blockNumber + block.nonce + block.data + block.prevHash)))});\n  }, [block.blockNumber, block.nonce, block.data, block.prevHash]);\n   // Set isSigned.\n  useEffect(() => {\n      setIsSigned(props.block.hash.substr(0, difficulty) === pattern ? true : false);\n  }, [props.block.hash]);\n   // Set color.\n  useEffect(() => {\n      setColor(isSigned ? GREEN : RED);\n  }, [isSigned]);\n   // Return the updated block to caller.\n  useEffect(() => {\n      props.callback(block);\n  }, [block]);\n  */\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: props.block.blockNumber,\n          callback: blockNumber => props.setBlockNumber(blockNumber)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: props.block.nonce,\n          callback: nonce => props.setNonce(nonce)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => props.setData(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Prev:',\n          value: props.block.prevHash,\n          callback: prevHash => props.setPrevHash(prevHash)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: props.block.hash,\n          callback: hash => props.setHash(hash)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: props.block.blockNumber,\n          data: props.block.data,\n          prevHash: props.block.prevHash,\n          callback: nonce => props.setNonce(nonce)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"G0sFeueqYD78RhsHwm4+275UVbg=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","props","color","setColor","isSigned","setIsSigned","block","blockNumber","setBlockNumber","nonce","setNonce","data","setData","prevHash","setPrevHash","hash","setHash"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n    //const [block, setBlock] = useState(props.block);\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    /*\n    // Update the hash.\n    useEffect(() => {\n        setBlock({...block, hash:(String(sha256(block.blockNumber + block.nonce + block.data + block.prevHash)))});\n    }, [block.blockNumber, block.nonce, block.data, block.prevHash]);\n\n    // Set isSigned.\n    useEffect(() => {\n        setIsSigned(props.block.hash.substr(0, difficulty) === pattern ? true : false);\n    }, [props.block.hash]);\n\n    // Set color.\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    }, [isSigned]);\n\n    // Return the updated block to caller.\n    useEffect(() => {\n        props.callback(block);\n    }, [block]);\n    */\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={props.block.blockNumber}\n                        callback={(blockNumber) => props.setBlockNumber(blockNumber)}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={props.block.nonce}\n                        callback={(nonce) => props.setNonce(nonce)}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => props.setData(data)}\n                    />\n                    <ReadOnlyTextField\n                        label={'Prev:'}\n                        value={props.block.prevHash}\n                        callback={(prevHash) => props.setPrevHash(prevHash)}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={props.block.hash}\n                        callback={(hash) => props.setHash(hash)}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={props.block.blockNumber}\n                        data={props.block.data}\n                        prevHash={props.block.prevHash}\n                        callback={(nonce) => props.setNonce(nonce)}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}