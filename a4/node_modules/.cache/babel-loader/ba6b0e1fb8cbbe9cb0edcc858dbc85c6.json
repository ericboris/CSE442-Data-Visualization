{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n  _s();\n\n  const [blockNumber, setBlockNumber] = useState(props.block.blockNumber);\n  const [nonce, setNonce] = useState(props.block.nonce);\n  const [data, setData] = useState(props.block.data);\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true);\n  /*\n  // Update the hash.\n  useEffect(() => {\n      setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n  }, [blockNumber, nonce, data, prevHash]);\n  */\n  // Set isSigned.\n\n  useEffect(() => {\n    setIsSigned(props.block.hash.substr(0, difficulty) === pattern ? true : false);\n  }); // Set color.\n\n  useEffect(() => {\n    setColor(isSigned ? GREEN : RED);\n  }); // Notify the caller of the changes. \n\n  useEffect(() => {\n    let newBlock = { ...props.block\n    };\n    newBlock.blockNumber = blockNumber;\n    newBlock.nonce = nonce;\n    newBlock.data = data;\n    newBlock.prevHash = prevHash;\n    newBlock.hash = hash;\n    props.callback(newBlock);\n  }, [blockNumber, nonce, data, prevHash, hash]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: blockNumber,\n          callback: blockNumber => setBlockNumber(String(blockNumber))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: nonce,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => setData(String(data))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Previous Hash:',\n          value: props.block.prevHash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: props.block.hash\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: blockNumber,\n          data: data,\n          prevHash: props.block.prevHash,\n          callback: nonce => setNonce(nonce)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"rLJ6EjKHExBxQBY0UqYxpb4Sgzo=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","props","blockNumber","setBlockNumber","block","nonce","setNonce","data","setData","color","setColor","isSigned","setIsSigned","hash","substr","newBlock","prevHash","callback","String"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n    const [blockNumber, setBlockNumber] = useState(props.block.blockNumber);\n    const [nonce, setNonce] = useState(props.block.nonce);\n    const [data, setData] = useState(props.block.data);\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    /*\n    // Update the hash.\n    useEffect(() => {\n        setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n    }, [blockNumber, nonce, data, prevHash]);\n    */\n\n    // Set isSigned.\n    useEffect(() => {\n        setIsSigned(props.block.hash.substr(0, difficulty) === pattern ? true : false);\n    });\n\n    // Set color.\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    });\n\n    // Notify the caller of the changes. \n    useEffect(() => {\n        let newBlock = {...props.block};\n        newBlock.blockNumber = blockNumber;\n        newBlock.nonce = nonce;\n        newBlock.data = data;\n        newBlock.prevHash = prevHash;\n        newBlock.hash = hash;\n        props.callback(newBlock);\n    }, [blockNumber, nonce, data, prevHash, hash]);\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={blockNumber}\n                        callback={(blockNumber) => setBlockNumber(String(blockNumber))}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={nonce}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => setData(String(data))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Previous Hash:'}\n                        value={props.block.prevHash}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={props.block.hash}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={blockNumber}\n                        data={data}\n                        prevHash={props.block.prevHash}\n                        callback={(nonce) => setNonce(nonce)}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}