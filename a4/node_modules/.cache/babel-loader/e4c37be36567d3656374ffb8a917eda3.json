{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n/*\nfunction mine(blockNumber, data, prevHash=\"\", block, setBlock) {\n    let sequence = null;\n    let hash = \"\";\n    for (let nonce = 0; nonce < maximumNonce; nonce++) {\n        hash = sha256(String(blockNumber + nonce + data + prevHash));\n        if (hash.substr(0, difficulty) === pattern) {\n            setBlock({...block, nonce});\n            return;\n        } else if (nonce % 10 === 0) {\n            setTimeout(() => {\n                setBlock({...block, nonce});\n            }, nonce);\n        }\n    }\n}\n*/\n\nfunction mine(blockNumber, data) {\n  let prevHash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let block = arguments.length > 3 ? arguments[3] : undefined;\n  let setBlock = arguments.length > 4 ? arguments[4] : undefined;\n\n  function* nonceIter() {\n    for (let nonce = 0; nonce < maximumNonce; nonce++) {\n      yield nonce;\n    }\n  }\n\n  function getHash(nonce) {\n    return String(sha256(blockNumber + nonce + data + prevHash));\n  }\n\n  let nonce = nonceIter().next().value;\n  let hash = getHash(nonce);\n  console.log(\"HASH\", hash);\n  /*\n  while (hash.substr(0, difficulty) !== pattern) {\n      setBlock({...block, nonce});\n      nonce = nonceIter.next().value;\n      hash = getHash(nonce);\n  }\n  */\n}\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash = \"\",\n    block,\n    setBlock\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(blockNumber, data, prevHash, block, setBlock),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton, mine };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maximumNonce","pattern","mine","blockNumber","data","prevHash","block","setBlock","nonceIter","nonce","getHash","String","next","value","hash","console","log","MineButton"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,MAAMC,OAAO,GAAGH,YAAY,CAACG,OAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAA+D;AAAA,MAA9BC,QAA8B,uEAArB,EAAqB;AAAA,MAAjBC,KAAiB;AAAA,MAAVC,QAAU;;AAC3D,YAAUC,SAAV,GAAsB;AAClB,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGT,YAA5B,EAA0CS,KAAK,EAA/C,EAAmD;AAC/C,YAAMA,KAAN;AACH;AACJ;;AAED,WAASC,OAAT,CAAiBD,KAAjB,EAAwB;AACpB,WAAOE,MAAM,CAACd,MAAM,CAACM,WAAW,GAAGM,KAAd,GAAsBL,IAAtB,GAA6BC,QAA9B,CAAP,CAAb;AACH;;AAED,MAAII,KAAK,GAAGD,SAAS,GAAGI,IAAZ,GAAmBC,KAA/B;AACA,MAAIC,IAAI,GAAGJ,OAAO,CAACD,KAAD,CAAlB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACC;AAID;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,UAAT,OAAuE;AAAA,MAAnD;AAACd,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAAQ,GAAC,EAA7B;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA;AAAxC,GAAmD;AACnE,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAML,IAAI,CAACC,WAAD,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,QAArC,CADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KARQU,U;AAQR;AAED,SAASA,UAAT,EAAqBf,IAArB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maximumNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\n/*\nfunction mine(blockNumber, data, prevHash=\"\", block, setBlock) {\n    let sequence = null;\n    let hash = \"\";\n    for (let nonce = 0; nonce < maximumNonce; nonce++) {\n        hash = sha256(String(blockNumber + nonce + data + prevHash));\n        if (hash.substr(0, difficulty) === pattern) {\n            setBlock({...block, nonce});\n            return;\n        } else if (nonce % 10 === 0) {\n            setTimeout(() => {\n                setBlock({...block, nonce});\n            }, nonce);\n        }\n    }\n}\n*/\n\n\nfunction mine(blockNumber, data, prevHash=\"\", block, setBlock) {\n    function* nonceIter() {\n        for (let nonce = 0; nonce < maximumNonce; nonce++) {\n            yield nonce;\n        }\n    }\n\n    function getHash(nonce) {\n        return String(sha256(blockNumber + nonce + data + prevHash));\n    }\n\n    let nonce = nonceIter().next().value;\n    let hash = getHash(nonce);\n    console.log(\"HASH\", hash);\n\n    /*\n    while (hash.substr(0, difficulty) !== pattern) {\n        setBlock({...block, nonce});\n        nonce = nonceIter.next().value;\n        hash = getHash(nonce);\n    }\n    */\n}\n\n\n\n/*\nfunction simulateMining() {\n    return new Promise((resolve) => setTimeout(resolve, 5000));\n}\n*/\n\n/*\nfunction simulateMine(i) {\n    setTimeout(() => {\n        console.log(\"I=\", i);\n    }, 2000);\n}\n\nfunction handleOnClick(nonces, block, setBlock) {\n    for (let i = 0; i < nonces.length; i++) {\n        simulateMine(i);\n    }  \n};\n*/\n\nfunction MineButton({blockNumber, data, prevHash=\"\", block, setBlock}) {\n    return (\n        <Button \n            onClick={() => mine(blockNumber, data, prevHash, block, setBlock)}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton, mine }\n"]},"metadata":{},"sourceType":"module"}