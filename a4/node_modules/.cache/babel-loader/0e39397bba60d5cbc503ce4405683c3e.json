{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern; // Define component globals.                                                      \n\nconst GREEN = '#50C878';\nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n  _s();\n\n  const [blockIndex, setBlockIndex] = useState(props.blockIndex);\n  const [blockNumber, setBlockNumber] = useState(String(props.blockNumber));\n  const [nonce, setNonce] = useState(String(props.nonce));\n  const [data, setData] = useState(String(props.data));\n  const [prevHash, setPrevHash] = useState(String(props.prevHash));\n  const [hash, setHash] = useState(String(props.hash));\n  const [color, setColor] = useState(GREEN);\n  const [isSigned, setIsSigned] = useState(true);\n  useEffect(() => {\n    setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n  }, [blockNumber, nonce, data, prevHash]);\n  useEffect(() => {\n    setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n  }, [hash]);\n  useEffect(() => {\n    setColor(isSigned ? GREEN : RED);\n  }, [isSigned]);\n  useEffect(() => {\n    const response = {\n      blockIndex,\n      blockNumber,\n      nonce,\n      data,\n      prevHash,\n      hash\n    };\n    props.callback(response);\n  }, [blockIndex, blockNumber, nonce, data, prevHash, hash]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        'width': 350,\n        'height': 500,\n        'background-color': color\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Block Number:',\n          value: blockNumber,\n          callback: blockNumber => setBlockNumber(String(blockNumber))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberField, {\n          label: 'Nonce:',\n          value: nonce,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextAreaField, {\n          label: 'Data:',\n          callback: data => setData(String(data))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Prev:',\n          value: props.prevHash,\n          callback: prevHash => setPrevHash(String(prevHash))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReadOnlyTextField, {\n          label: 'Hash:',\n          value: hash,\n          callback: hash => setHash(String(hash))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MineButton, {\n          blockNumber: blockNumber,\n          data: data,\n          prevHash: prevHash,\n          callback: nonce => setNonce(String(nonce))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SingleBlock, \"aiiK7EHx+/u0spy2F3fSB8NT31A=\");\n\n_c = SingleBlock;\nexport default SingleBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleBlock\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Blockchain/SingleBlock.js"],"names":["React","useState","useEffect","Container","Form","sha256","NumberField","ReadOnlyTextField","TextAreaField","MineButton","mine","MineSettings","difficulty","pattern","GREEN","RED","SingleBlock","props","blockIndex","setBlockIndex","blockNumber","setBlockNumber","String","nonce","setNonce","data","setData","prevHash","setPrevHash","hash","setHash","color","setColor","isSigned","setIsSigned","substr","response","callback"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { NumberField, ReadOnlyTextField, TextAreaField } from '../Fields';\nimport { MineButton, mine } from '../MineButton';\nimport MineSettings from '../MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst pattern = MineSettings.pattern;\n\n// Define component globals.                                                      \nconst GREEN = '#50C878';                                                          \nconst RED = '#FF0000';\n\nfunction SingleBlock(props) {\n    const [blockIndex, setBlockIndex] = useState(props.blockIndex);\n    const [blockNumber, setBlockNumber] = useState(String(props.blockNumber));\n    const [nonce, setNonce] = useState(String(props.nonce));\n    const [data, setData] = useState(String(props.data));\n    const [prevHash, setPrevHash] = useState(String(props.prevHash));\n    const [hash, setHash] = useState(String(props.hash));\n    const [color, setColor] = useState(GREEN);\n    const [isSigned, setIsSigned] = useState(true);\n\n    useEffect(() => {\n        setHash(String(sha256(blockNumber + nonce + data + prevHash)));\n    }, [blockNumber, nonce, data, prevHash]);\n\n    useEffect(() => {\n        setIsSigned(hash.substr(0, difficulty) === pattern ? true : false);\n    }, [hash]);\n\n    useEffect(() => {\n        setColor(isSigned ? GREEN : RED);\n    }, [isSigned]);\n\n    useEffect(() => {\n        const response = {\n            blockIndex, \n            blockNumber, \n            nonce,\n            data,\n            prevHash, \n            hash\n        };\n        props.callback(response);\n    }, [blockIndex, blockNumber, nonce, data, prevHash, hash]);\n\n    return (\n        <Container>\n            <Container\n                style={{\n                    'width':350,\n                    'height':500,\n                    'background-color':color\n                }}\n            >\n                <Form>\n                    <br/>\n                    <NumberField\n                        label={'Block Number:'}\n                        value={blockNumber}\n                        callback={(blockNumber) => setBlockNumber(String(blockNumber))}\n                    />\n                    <NumberField\n                        label={'Nonce:'}\n                        value={nonce}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                    <TextAreaField\n                        label={'Data:'}\n                        callback={(data) => setData(String(data))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Prev:'}\n                        value={props.prevHash}\n                        callback={(prevHash) => setPrevHash(String(prevHash))}\n                    />\n                    <ReadOnlyTextField\n                        label={'Hash:'}\n                        value={hash}\n                        callback={(hash) => setHash(String(hash))}\n                    />\n                    <br/>\n                    <MineButton\n                        blockNumber={blockNumber}\n                        data={data}\n                        prevHash={prevHash}\n                        callback={(nonce) => setNonce(String(nonce))}\n                    />\n                </Form>\n            </Container>\n        </Container>\n    );\n}\n\nexport default SingleBlock;\n"]},"metadata":{},"sourceType":"module"}