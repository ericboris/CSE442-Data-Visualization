{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash,\n    isSigned,\n    callback,\n    block,\n    setBlock\n  } = _ref;\n\n  const mine = function () {\n    let nonce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n\n    const isSigned = hash => hash.substr(0, difficulty) === pattern;\n\n    while (!isSigned(hash(nonce++))) {\n      setBlock({ ...block,\n        nonce\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => mine(),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","MineButton","blockNumber","data","prevHash","isSigned","callback","block","setBlock","mine","nonce","hash","substr"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;;AAEA,SAASC,UAAT,OAAwF;AAAA,MAApE;AAACC,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA,KAAlD;AAAyDC,IAAAA;AAAzD,GAAoE;;AACpF,QAAMC,IAAI,GAAG,YAAe;AAAA,QAAdC,KAAc,uEAAN,CAAM;;AACxB,UAAMC,IAAI,GAAGD,KAAK,IAAIf,MAAM,CAACO,WAAW,GAAGQ,KAAd,GAAsBP,IAAtB,GAA6BC,QAA9B,CAA5B;;AACA,UAAMC,QAAQ,GAAGM,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAef,UAAf,MAA+BG,OAAxD;;AACA,WAAO,CAACK,QAAQ,CAACM,IAAI,CAACD,KAAK,EAAN,CAAL,CAAhB,EAAiC;AAC7BF,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWG,QAAAA;AAAX,OAAD,CAAR;AACH;AACJ,GAND;;AAQA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMD,IAAI,EADvB;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KAhBQR,U;AAgBR;AAED,SAASA,UAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\nfunction MineButton({blockNumber, data, prevHash, isSigned, callback, block, setBlock}) {\n    const mine = (nonce = 0) => {\n        const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n        const isSigned = hash => hash.substr(0, difficulty) === pattern;\n        while (!isSigned(hash(nonce++))) {\n            setBlock({...block, nonce})\n        }\n    }   \n\n    return (\n        <Button \n            onClick={() => mine()}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}