{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js\";\nimport { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings'; // Parse the mining settings.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n/*\nfunction* nonceIter(blockNumber, data, prevHash) {\n    const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n    const isSigned = hash => hash.substr(0, difficulty) === pattern;\n    let nonce = 0;\n    while (!isSigned(hash(nonce))) {\n        yield nonce;\n        nonce++;\n    }\n}\n*/\n\nfunction* nonceIter(nonce) {\n  yield nonce;\n  nonce++;\n}\n\nfunction hash(blockNumber, nonce, data, prevHash) {\n  console.log(\"HASH\");\n  return sha256(blockNumber + nonce + data + prevHash);\n}\n\nfunction isSigned(hash) {\n  console.log(\"ISSIGNED\");\n  return hash.substr(0, difficulty) === pattern;\n}\n\nfunction MineButton(_ref) {\n  let {\n    blockNumber,\n    data,\n    prevHash,\n    callback,\n    block,\n    setBlock\n  } = _ref;\n\n  /*\n  const mine = (nonce = 0) => {\n      const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n      const isSigned = hash => hash.substr(0, difficulty) === pattern;\n      while (!isSigned(hash(nonce))) {\n          nonce++;\n      }\n      return nonce;\n  }   \n  */\n\n  /*\n  const handleClick = () => {\n      let nonce = 0;\n      const interval = setInterval(() => {\n          nonce = nonceIter(blockNumber, data, prevHash).next().value;\n          if (nonce % 10 === 0) {\n              setBlock({...block, nonce}); \n          }\n      }, 1000);\n      return () => clearInterval(interval);\n  }\n  */\n  //const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n  //const isSigned = hash => hash.substr(0, difficulty) === pattern;\n  const setNonce = nonce => {\n    console.log(\"NONCE\", nonce);\n\n    if (isSigned(hash(blockNumber, nonce, data, prevHash))) {\n      setBlock({ ...block,\n        nonce\n      });\n      return;\n    } else {\n      const timer = setTimeout(() => {\n        if (nonce % 10 === 0) {\n          setBlock({ ...block,\n            nonce\n          });\n        }\n\n        setNonce(nonce + 1);\n      }, nonce);\n    }\n  };\n\n  const handleClick = () => {\n    setNonce(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => handleClick(),\n    children: 'Mine!'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MineButton;\n;\nexport { MineButton };\n\nvar _c;\n\n$RefreshReg$(_c, \"MineButton\");","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/MineButton.js"],"names":["useState","useEffect","Button","sha256","MineSettings","difficulty","maxNonce","maximumNonce","pattern","nonceIter","nonce","hash","blockNumber","data","prevHash","console","log","isSigned","substr","MineButton","callback","block","setBlock","setNonce","timer","setTimeout","handleClick"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGD,YAAY,CAACC,UAAhC;AACA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,YAA9B;AACA,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,SAAV,CAAoBC,KAApB,EAA2B;AACvB,QAAMA,KAAN;AACAA,EAAAA,KAAK;AACR;;AAED,SAASC,IAAT,CAAcC,WAAd,EAA2BF,KAA3B,EAAkCG,IAAlC,EAAwCC,QAAxC,EAAkD;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,SAAOb,MAAM,CAACS,WAAW,GAAGF,KAAd,GAAsBG,IAAtB,GAA6BC,QAA9B,CAAb;AACF;;AAED,SAASG,QAAT,CAAkBN,IAAlB,EAAwB;AACpBI,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAOL,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeb,UAAf,MAA+BG,OAAtC;AACH;;AAED,SAASW,UAAT,OAA8E;AAAA,MAA1D;AAACP,IAAAA,WAAD;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,QAApB;AAA8BM,IAAAA,QAA9B;AAAwCC,IAAAA,KAAxC;AAA+CC,IAAAA;AAA/C,GAA0D;;AAC1E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AAGA,QAAMC,QAAQ,GAAIb,KAAD,IAAW;AACxBK,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAArB;;AACA,QAAIO,QAAQ,CAACN,IAAI,CAACC,WAAD,EAAcF,KAAd,EAAqBG,IAArB,EAA2BC,QAA3B,CAAL,CAAZ,EAAwD;AACpDQ,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWX,QAAAA;AAAX,OAAD,CAAR;AACA;AACH,KAHD,MAGO;AACH,YAAMc,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC3B,YAAIf,KAAK,GAAG,EAAR,KAAe,CAAnB,EAAsB;AAClBY,UAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWX,YAAAA;AAAX,WAAD,CAAR;AACH;;AACDa,QAAAA,QAAQ,CAACb,KAAK,GAAG,CAAT,CAAR;AACH,OALuB,EAKrBA,KALqB,CAAxB;AAMH;AACJ,GAbD;;AAeA,QAAMgB,WAAW,GAAG,MAAM;AACtBH,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACH,GAFD;;AAIA,sBACI,QAAC,MAAD;AACI,IAAA,OAAO,EAAE,MAAMG,WAAW,EAD9B;AAAA,cAGK;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KAtDQP,U;AAsDR;AAED,SAASA,UAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport MineSettings from './MineSettings';\n\n// Parse the mining settings.\nconst difficulty = MineSettings.difficulty;\nconst maxNonce = MineSettings.maximumNonce;\nconst pattern = MineSettings.pattern;\n\n/*\nfunction* nonceIter(blockNumber, data, prevHash) {\n    const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n    const isSigned = hash => hash.substr(0, difficulty) === pattern;\n    let nonce = 0;\n    while (!isSigned(hash(nonce))) {\n        yield nonce;\n        nonce++;\n    }\n}\n*/\n\nfunction* nonceIter(nonce) {\n    yield nonce;\n    nonce++;\n}\n\nfunction hash(blockNumber, nonce, data, prevHash) {\n    console.log(\"HASH\");\n   return sha256(blockNumber + nonce + data + prevHash); \n}\n\nfunction isSigned(hash) {\n    console.log(\"ISSIGNED\");\n    return hash.substr(0, difficulty) === pattern;\n}\n\nfunction MineButton({blockNumber, data, prevHash, callback, block, setBlock}) {\n    /*\n    const mine = (nonce = 0) => {\n        const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n        const isSigned = hash => hash.substr(0, difficulty) === pattern;\n        while (!isSigned(hash(nonce))) {\n            nonce++;\n        }\n        return nonce;\n    }   \n    */\n\n    /*\n    const handleClick = () => {\n        let nonce = 0;\n        const interval = setInterval(() => {\n            nonce = nonceIter(blockNumber, data, prevHash).next().value;\n            if (nonce % 10 === 0) {\n                setBlock({...block, nonce}); \n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }\n    */\n    //const hash = nonce => sha256(blockNumber + nonce + data + prevHash);\n    //const isSigned = hash => hash.substr(0, difficulty) === pattern;\n\n\n    const setNonce = (nonce) => {\n        console.log(\"NONCE\", nonce);\n        if (isSigned(hash(blockNumber, nonce, data, prevHash))) {\n            setBlock({...block, nonce});\n            return;\n        } else {\n            const timer = setTimeout(() => {\n                if (nonce % 10 === 0) {\n                    setBlock({...block, nonce});\n                }\n                setNonce(nonce + 1);\n            }, nonce);\n        }\n    }\n\n    const handleClick = () => {\n        setNonce(0)\n    }\n\n    return (\n        <Button \n            onClick={() => handleClick()}\n        >\n            {'Mine!'}\n        </Button>\n    );\n};\n\nexport { MineButton }\n"]},"metadata":{},"sourceType":"module"}