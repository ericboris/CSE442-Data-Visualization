{"ast":null,"code":"var _jsxFileName = \"/Users/ericboris/Developer/CSE442/a4/src/components/Block/Block.js\";\nimport React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport { render } from \"react-dom\"; //import get from '../../descriptionLoader';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet difficulty = 4; // number of zeros required at front of hash\n\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n  constructor(props) {\n    super(props);\n    const [title, body] = [\"Block\", \"Blocky stuff\"];\n    this.state = {\n      pattern: '0'.repeat(difficulty),\n      blockNumber: 1,\n      nonce: 1234,\n      data: \"\",\n      hash: \"\",\n      sequence: \"\",\n      title,\n      body\n    };\n    this.getSequence = this.getSequence.bind(this);\n    this.mine = this.mine.bind(this);\n  }\n\n  getSequence() {\n    return this.nonce.value.toString() + this.blockNumber.value.toString() + this.data.value.toString();\n  }\n\n  mine(data) {\n    let hashAndNonce = {};\n\n    for (let x = 0; x <= maximumNonce; x++) {\n      let nonceString = x.toString();\n      let newData = data + nonceString;\n      hashAndNonce[0] = sha256(newData);\n\n      if (hashAndNonce[0].substr(0, difficulty) === this.state.pattern) {\n        hashAndNonce[1] = x;\n        break;\n      }\n    }\n\n    this.setState({\n      hash: hashAndNonce[0],\n      nonce: hashAndNonce[1]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.body.split('\\n\\n').map(paragraph => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: paragraph.split('\\n').reduce((total, line) => [total, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 84\n          }, this), line])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onChange: event => {\n            event.preventDefault();\n            this.setState({\n              nonce: this.nonce.value,\n              blockNumber: this.blockNumber.value,\n              data: this.data.value,\n              sequence: this.getSequence(),\n              hash: sha256(this.state.sequence.toString())\n            });\n            console.log(\"nonce: \" + this.nonce.value);\n            console.log(\"blockNumber: \" + this.blockNumber.value);\n            console.log(\"data: \" + this.data.value);\n            console.log(\"sequence: \" + this.state.sequence);\n            console.log(\"hash: \" + this.state.hash);\n          } // onClick={(event) => {\n          //     event.preventDefault();\n          //     this.setState({\n          //         sequence: mineBlock(this.data.value)})}\n          ,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Block Number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"text\",\n              placeholder: \"1\",\n              ref: blockNumberInput => this.blockNumber = blockNumberInput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Nonce:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"number\",\n              placeholder: \"1234\",\n              ref: nonceInput => this.nonce = nonceInput,\n              value: this.state.nonce\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Data:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              type: \"text\",\n              placeholder: \"\",\n              ref: input => this.data = input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Hash:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: this.state.hash,\n              plaintext: true,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: event => {\n            event.preventDefault();\n            this.mine(this.state.sequence);\n          },\n          children: \"Press\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Block;","map":{"version":3,"sources":["/Users/ericboris/Developer/CSE442/a4/src/components/Block/Block.js"],"names":["React","Component","Container","Form","Button","sha256","render","difficulty","maximumNonce","Block","constructor","props","title","body","state","pattern","repeat","blockNumber","nonce","data","hash","sequence","getSequence","bind","mine","value","toString","hashAndNonce","x","nonceString","newData","substr","setState","split","map","paragraph","reduce","total","line","event","preventDefault","console","log","blockNumberInput","nonceInput","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport {render} from \"react-dom\";\n//import get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Block\", \"Blocky stuff\"];\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 1234,\n            data: \"\",\n            hash: \"\",\n            sequence: \"\",\n            title,\n            body,\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n    }\n\n    getSequence() {\n        return (this.nonce.value.toString()+ this.blockNumber.value.toString() + this.data.value.toString());\n    }\n    \n    mine(data) {\n        let hashAndNonce = {};\n        for (let x = 0; x <= maximumNonce; x++) {\n            let nonceString = x.toString();\n            let newData = data + nonceString;\n            hashAndNonce[0] = (sha256(newData));\n            if (hashAndNonce[0].substr(0, difficulty) === this.state.pattern) {\n                hashAndNonce[1] = x;\n                break;\n            }\n        }\n        this.setState({hash : hashAndNonce[0],\n                       nonce: hashAndNonce[1]});\n    }\n\n    render() {\n        return (\n            <Container>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            nonce : this.nonce.value,\n                            blockNumber : this.blockNumber.value,\n                            data : this.data.value,\n                            sequence : this.getSequence(),\n                            hash : sha256(this.state.sequence.toString())})\n                            console.log(\"nonce: \" + this.nonce.value)\n                            console.log(\"blockNumber: \" + this.blockNumber.value)\n                            console.log(\"data: \" + this.data.value)\n                            console.log(\"sequence: \" + this.state.sequence)\n                            console.log(\"hash: \" + this.state.hash)\n                    }}\n                    \n                    // onClick={(event) => {\n                    //     event.preventDefault();\n                    //     this.setState({\n                    //         sequence: mineBlock(this.data.value)})}\n                    >\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder='1' \n                                ref={(blockNumberInput) =>\n                                    this.blockNumber = blockNumberInput\n                                }\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"number\"\n                                placeholder=\"1234\" \n                                ref={(nonceInput) =>\n                                    this.nonce = nonceInput\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\" \n                                ref={(input) =>\n                                    this.data = input\n                                }\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:  \n                            </Form.Label>\n                            <Form.Control \n                                type=\"text\" \n                                value= {this.state.hash}\n                                plaintext readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.sequence);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n\n"]},"metadata":{},"sourceType":"module"}