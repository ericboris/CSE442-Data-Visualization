{"version":3,"sources":["descriptionLoader.js","components/Hash/Hash.js","components/SingleBlock.js","components/Block/Block.js","components/Blockchain/Blockchain.js","components/Distributed/Distributed.js","components/Tokens/Tokens.js","components/Coinbase/Coinbase.js","App.js","reportWebVitals.js","index.js"],"names":["get","url","text","index","indexOf","slice","split","content","$","data","Hash","props","title","body","state","Container","fluid","this","map","paragraph","reduce","total","line","Form","onChange","event","preventDefault","setState","value","Group","Label","Control","as","type","placeholder","ref","input","sha256","readOnly","Component","SingleBlock","pattern","repeat","blockNumber","nonce","hash","color","getSequence","bind","mine","handleColorChange","col","getColor","toString","sequence","substr","Button","onClick","Block","class","style","Blockchain","App","handleColor","colorVal","className","Distributed","Tokens","Coinbase","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7444f43.chunk.js","sourcesContent":["import * as $ from 'jquery';\n\n// Get the text file from the url and return its contents as a title and body.\nfunction get(url) {\n    const content = (() => {\n        var content = null;\n        $.ajax({\n            'async': false,\n            'url': url,\n            'dataType': \"text\",\n            'success': (data) => {\n                content = data;\n            }\n        });\n        return content;\n    })();\n    return split(content);\n}\n\n// Split the text on the first newline character.\nfunction split(text) {\n    const index = text.indexOf('\\n\\n');\n    return [text.slice(0, index), text.slice(index)];\n}\n\nexport default get;\n","import React, { Component } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport get from '../../descriptionLoader';\n\nclass Hash extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = get(\"https://cse442-21f.github.io/FP-Blockchain/descriptions/Hash.txt\");\n        //const [title, body] = ['title', 'body'];\n        this.state = {\n            data: \"\",\n            title,\n            body,\n        };\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container fluid>\n                    <Form onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({ data: this.data.value });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Data: \n                            </Form.Label>\n                            <Form.Control \n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\" \n                                ref={(input) => \n                                    this.data = input\n                                }\n                            />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:  \n                            </Form.Label>\n                                <Form.Control \n                                    type=\"text\" \n                                    value={sha256(this.state.data)} \n                                    readOnly\n                                />\n                        </Form.Group>\n                    </Form>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Hash;\n","import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\nimport get from '../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass SingleBlock extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            //green\n            color: \"#50C878\"\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)        \n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    mine(blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n        this.setState({color: \"#50C878\"});\n        this.handleColorChange(this.state.color);\n\n   }\n\n    render() {\n        return (\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                               }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                               }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Mine!\n                    </Button>\n                </Container>\n        );\n    }\n}\n\nexport default SingleBlock;","import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\nimport SingleBlock from '../SingleBlock';\n//import {render} from \"react-dom\";\nimport get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash \nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = get(\"https://cse442-21f.github.io/FP-Blockchain/descriptions/Block.txt\"); \n        //const [title, body] = ['title', 'body'];\n        this.state = {\n            title,\n            body\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <div class=\"row justify-content-center\">\n                    <div class = \"col-md-5\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n","import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\n//import Form from 'react-bootstrap';\n//import { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\nimport SingleBlock from '../SingleBlock'\n//import get from '../../descriptionLoader';\n\n\n//commented a lot out to get it to show the box\n\n// function mineBlock(data) {\n//     var difficulty = 4;        // number of zeros required at front of hash\n//     var maximumNonce = 50000; // limit the nonce to this so we don't mine too long\n\n\n//     var pattern = '';\n//     for (var x=0; x<difficulty; x++) {\n//         pattern += '0';\n//     }\n\n//     let hashAndNonce = {};\n//     for (var x = 0; x <= maximumNonce; x++) {\n//         var nonceString = x.toString();\n//         var newData = data + nonceString;\n//         hashAndNonce[0] = (sha256(newData));\n//         if (hashAndNonce[0].substr(0, difficulty) === pattern) {\n//             console.log(\"hashed successfully:\" + hashAndNonce[0])\n//             hashAndNonce[1] = x;\n//             break;\n//         }\n//     }\n//     console.log(hashAndNonce);\n//     //TODO: Update the values of hash and nonce\n\n//     // this.setState({hash : hashAndNonce[0],\n//     //                nonce: hashAndNonce[1]})  ;\n\n//     //  return hashAndNonce;\n// }\n\n\nclass Blockchain extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Blockchain [WORK IN PROGRESS] \", \"Blockchain's Description\"];\n        this.state = {\n            title,\n            body\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <div class = \"row justify-content-around\" >\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                    <div class = \"col-sm-3\" style = {{\"background-color\":\"#50C878\"}}>\n                        <SingleBlock  />\n                    </div>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default Blockchain;\n","import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\n//import get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Distributed [WORK IN PROGRESS] \", \"Distributed's Description\"];\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            title,\n            body,\n            //green\n            color: \"#50C878\"\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)\n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    mine(blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n        this.setState({color: \"#50C878\"});\n        this.handleColorChange(this.state.color);\n\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                                }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n","import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\n//import get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Tokens [WORK IN PROGRESS] \", \"Tokens' Description\"];\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            title,\n            body,\n            //green\n            color: \"#50C878\"\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)\n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    mine(blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n        this.setState({color: \"#50C878\"});\n        this.handleColorChange(this.state.color);\n\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                                }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n","import React, { Component } from 'react';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport { sha256 } from 'js-sha256';\n//import {render} from \"react-dom\";\n//import get from '../../descriptionLoader';\n\nlet difficulty = 4;        // number of zeros required at front of hash\nlet maximumNonce = 500000; // limit the nonce to this so we don't mine too long\n\nclass Block extends Component {\n    constructor(props) {\n        super(props);\n        const [title, body] = [\"Coinbase [WORK IN PROGRESS] \", \"Coinbase's Description\"];\n        this.state = {\n            pattern: '0'.repeat(difficulty),\n            blockNumber: 1,\n            nonce: 72608,\n            data: \"\",\n            hash: sha256(\"1\" + \"72608\" + \"\"),\n            title,\n            body,\n            //green\n            color: \"#50C878\"\n        };\n        this.getSequence = this.getSequence.bind(this);\n        this.mine = this.mine.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n    }\n\n    handleColorChange() {\n        var col = this.state.color\n        this.props.getColor(col)\n    }\n\n    getSequence() {\n        return (this.blockNumber.value.toString() + this.nonce.value.toString() + this.data.value.toString());\n    }\n\n    /* Find a nonce s.t. the hash of the string concatenation of\n     * blockNumber, nonce, and data fields (IN THAT ORDER!) results in a hash\n     * that starts with n=difficulty many zeros.\n     * Updates the state with the found nonce and hash.\n     */\n    mine(blockNumber, data) {\n        let sequence = null;\n        let hash = null;\n        for (let nonce = 0; nonce <= maximumNonce; nonce++) {\n            sequence = blockNumber.toString() + nonce.toString() + data.toString();\n            hash = sha256(sequence);\n            if (hash.substr(0, difficulty) === this.state.pattern) {\n                this.setState({hash, nonce});\n                return;\n            }\n        }\n        this.setState({color: \"#50C878\"});\n        this.handleColorChange(this.state.color);\n\n    }\n\n    render() {\n        return (\n            <Container fluid>\n                <h2>\n                    {this.state.title}\n                </h2>\n                <div>\n                    {this.state.body.split('\\n\\n').map(paragraph =>\n                        <p>\n                            {paragraph.split('\\n').reduce((total, line) => [total, <br />, line])}\n                        </p>\n                    )}\n                </div>\n                <Container fluid>\n                    <Form  onChange={(event) => {\n                        event.preventDefault();\n                        this.setState({\n                            blockNumber: this.blockNumber.value,\n                            nonce: this.nonce.value,\n                            data: this.data.value,\n                            hash : sha256(this.getSequence()),\n                            //red\n                            color: \"#F75D59\"\n                        });\n                    }}>\n                        <Form.Group>\n                            <Form.Label>\n                                Block Number:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.blockNumber = input\n                                }\n                                value = {this.state.blockNumber}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Nonce:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                ref={(input) =>\n                                    this.nonce = input\n                                }\n                                value = {this.state.nonce}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Data:\n                            </Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                type=\"text\"\n                                placeholder=\"\"\n                                ref={(input) =>\n                                    this.data = input\n                                }\n                                value = {this.state.data}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Hash:\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                value= {this.state.hash}\n                                readOnly\n                            />\n                        </Form.Group>\n                    </Form>\n                    <Button onClick={(event) => {\n                        event.preventDefault();\n                        this.mine(this.state.blockNumber, this.state.data);\n                    }}>\n                        Press\n                    </Button>\n                </Container>\n            </Container>\n        );\n    }\n}\n\nexport default Block;\n","import Hash from './components/Hash/Hash';\nimport Block from './components/Block/Block';\nimport Blockchain from './components/Blockchain/Blockchain';\nimport Distributed from './components/Distributed/Distributed';\nimport Tokens from \"./components/Tokens/Tokens\";\nimport Coinbase from \"./components/Coinbase/Coinbase\";\nimport React from 'react';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleColor = this.handleColor.bind(this);\n    //start green  \n    this.state = {color: \"#50C878\"};\n  }\n\n  handleColor(colorVal){\n    this.setState({color: colorVal})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"Hash\">\n              <Hash />\n          </div>\n          <div className=\"Block\">\n              <Block />\n          </div>\n          <div className=\"Blockchain\">\n              <Blockchain />\n          </div>\n          <div className=\"Distributed\">\n              <Distributed />\n          </div>\n          <div className=\"Tokens\">\n              <Tokens />\n          </div>\n          <div className=\"Coinbase\">\n              <Coinbase />\n          </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}